{"version":3,"sources":["../../../assets/modernizr.min.js","../../../assets/js/app.js","../../../assets/js/services.js","../../../assets/js/main.js","../../../assets/js/cart.js","../../../assets/js/quote-request.js","../../../assets/js/products-compare/add-to-compare-button.js","../../../assets/js/products-compare/product-compare-list-bar.js","../../../assets/js/products-compare/product-compare.js","../../../assets/js/searchBar.js","../../../assets/js/common-components/address.js","../../../assets/js/common-components/creditCard.js","../../../assets/js/common-components/labeled-input.js","../../../assets/js/common-components/lineItems.js","../../../assets/js/common-components/paymentMethods.js","../../../assets/js/common-components/totals.js","../../../assets/js/account/$account.js","../../../assets/js/account/account-addresses.js","../../../assets/js/account/account-lists.js","../../../assets/js/account/account-orders.js","../../../assets/js/account/account-password-change.js","../../../assets/js/account/account-profile-update.js","../../../assets/js/account/account-quotes.js","../../../assets/js/account/account-subscriptions.js","../../../assets/js/account/accountApi.js"],"names":["window","Modernizr","a","b","c","z","j","cssText","B","C","indexOf","D","d","e","E","f","bind","F","charAt","toUpperCase","slice","o","join","split","p","v","y","g","documentElement","h","i","createElement","style","m","n","toLowerCase","q","t","u","w","k","l","body","parseInt","id","appendChild","innerHTML","background","overflow","parentNode","removeChild","x","hasOwnProperty","call","constructor","prototype","Function","this","TypeError","arguments","apply","concat","Object","touch","DocumentTouch","offsetTop","csstransforms","csstransforms3d","offsetLeft","offsetHeight","fontface","getElementById","sheet","styleSheet","cssRules","test","G","push","addTest","className","_version","_prefixes","_domPrefixes","_cssomPrefixes","testProp","testAllProps","testStyles","replace","document","storefrontAppDependencies","storefrontApp","angular","module","factory","$q","$rootScope","httpErrorInterceptor","responseError","rejection","data","message","$broadcast","type","title","config","method","url","status","statusText","stackTrace","reject","requestError","$httpProvider","$translateProvider","interceptors","useSanitizeValueStrategy","useUrlLoader","BASE_URL","preferredLanguage","service","$uibModal","showDialog","dialogData","controller","templateUrl","open","resolve","$http","postFeedback","post","getCurrentCustomer","get","Date","getTime","getDynamicContent","placeName","getActualProductPrices","products","$localStorage","isInProductCompareList","productId","_","some","addProduct","uniq","getProductsIds","ids","length","getProductsCount","clearComapreList","removeProduct","without","getProduct","productIds","getProducts","search","criteria","searchCategories","getCart","getCartItemsCount","addLineItem","quantity","changeLineItemQuantity","lineItemId","put","removeLineItem","delete","changeLineItemPrice","newPrice","clearCart","getCountries","getCountryRegions","countryCode","addCoupon","couponCode","removeCoupon","addOrUpdateShipment","shipment","addOrUpdatePayment","payment","getAvailableShippingMethods","shipmentId","getAvailablePaymentMethods","addOrUpdatePaymentPlan","plan","removePaymentPlan","createOrder","bankCardInfo","updateCartComment","cartComment","comment","getWishlist","listName","contains","getListsWithProduct","listNames","getCurrentQuoteRequest","getQuoteRequest","number","getQuoteRequestItemsCount","addProductToQuoteRequest","removeProductFromQuoteRequest","quoteRequestNumber","quoteItemId","submitQuoteRequest","quoteRequest","rejectQuoteRequest","updateQuoteRequest","getTotals","confirmQuoteRequest","getRecommendedProducts","requestData","getOrder","orderNumber","$scope","$location","$window","customerService","mainContext","baseUrl","$watch","currentPath","$$path","$on","event","storefrontNotification","detailsVisible","toggleNotificationDetails","closeNotification","outerRedirect","absUrl","location","href","innerRedirect","path","stringifyAddress","address","stringifiedAddress","firstName","lastName","organization","countryName","regionName","city","line1","line2","postalCode","getObjectSize","obj","key","size","getCustomer","then","response","addressId","each","addresses","isContact","memberType","customer","$timeout","cartService","catalogService","cartIsUpdating","cart","hasValidationErrors","validationErrors","items","item","timer","setCartForm","form","formCart","lineItem","find","$invalid","initialQuantity","cancel","initialItems","copy","recentCartItemModalVisible","submitCart","$setSubmitted","resp","searchProduct","productSearchResult","productSkuOrName","productSearchProcessing","keyword","start","pageSize","selectSearchedProduct","product","selectedSearchedProduct","name","addProductToCart","cartItemsCount","$uibModalInstance","updated","close","redirect","quoteRequestService","billingAddress","quoteItem","proposalPrices","tierPrice","selectedTierPrice","requestShippingQuote","countries","addressType","countryRegions","billingCountryRegions","shippingCountryRegions","toFormModel","quoteRequestFormModel","tag","shippingAddress","quoteItemFormModel","price","amount","currentQuoteRequestNumber","billingCountry","shippingCountry","itemsCount","setQuoteRequestForm","formQuoteRequest","displayForStatuses","statuses","addTierPrice","salePrice","changeTierPriceQuantity","isNaN","removeTierPrice","initialQuoteItems","setCountry","country","code3","code2","regionId","setCountryRegion","countryRegion","r","code","selectCustomerAddress","email","isRegisteredUser","selectTierPrice","totals","setRequestShippingQuote","setShippingAddressEqualsBilling","shippingAddressEqualsBilling","tierPricesUnique","quantities","map","actualQuoteRequest","component","bindings","buttonType","customClass","buttonWidth","dialogService","compareProductService","$ctrl","showButtonName","$onInit","containProduct","addProductToCompareList","preventDefault","productQuantity","capacityExceeded","existingProduct","modifyProperty","properties","property","valueType","value","formatNumber","float","parseFloat","getProductProperties","isEmpty","grouped","flatten","propertyDisplayNames","displayName","props","where","productProperty","prop","hasValues","onlyDifferences","uniqueValues","clearCompareList","loaded","productsIds","query","searchQuery","getSuggestions","searching","categorySuggestions","productSuggestions","searchCriteria","suggestionsLimit","categories","first","validationContainer","editMode","onUpdate","require","checkoutStep","populateRegionalDataForAddress","findWhere","ctrl","regions","setAddressRegion","region","undefined","addComponent","$onDestroy","removeComponent","setForm","frm","validate","$valid","card","$filter","val","bankCardHolderName","placeholder","required","requiredError","autofocus","getAvailPaymentMethods","onSelectMethod","paymentMethod","methods","availPaymentMethods","sortBy","priority","selectMethod","order","moduleName","run","$templateCache","$routeConfig","useAsDefault","accountApi","loader","getQuotes","pageNumber","sortInfos","callback","wrapLoading","$promise","updateProfile","updateRequest","updateAccount","updateAddresses","availCountries","changePassword","changePasswordData","confirm","when","retVal","isLoading","func","result","accountManager","confirmService","$translate","addNewAddress","last","components","newAddress","submit","editIdx","editItem","edit","$index","text","confirmed","splice","listService","selectedList","initialize","lists","selectList","forEach","list","titleKey","descriptionKey","translations","description","translationIds","addToCart","productAdded","orderHelper","orderApi","pageSettings","currentPage","itemsPerPageCount","numPages","pageChanged","entries","results","totalItems","totalCount","$routerOnActivate","next","params","refresh","isShowPayment","lastPayment","inPayments","amountToPay","getNewPayment","sum","billingAddressEqualsShipping","loadPromise","getNewPaymentData","configurePayment","paymentMethods","newPaymentTemplate","purpose","canCancelPayment","selectPaymentMethod","gatewayCode","shipments","hasPhysicalProducts","getInvoicePdf","showPayment","preselectedMaymentMethod","extend","isValid","every","processPayment","paymentNumber","orderProcessingResult","isSuccess","error","newPaymentStatus","paymentMethodType","htmlForm","redirectUrl","cancelPayment","paidPayments","filter","paidAmount","reduce","memo","num","total","pendingPayments","isCancelled","pendingPayment","found","statusLabels","label","passwordChangeData","errors","errorMsg","hasError","oldPassword","newPassword","newPassword2","$setPristine","$router","isContract","navigate","changeData","subscriptionApi","entryNumber","subscription","cancelReason","isCancelFormVisible","data_intervalCount","interval","$resource","isArray"],"mappings":"AAGAA,OAAAC,UAAA,SAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAH,GAAAI,EAAAC,QAAAL,EAAA,QAAAM,GAAAN,EAAAC,GAAA,aAAAD,KAAAC,EAAA,QAAAM,GAAAP,EAAAC,GAAA,UAAA,GAAAD,GAAAQ,QAAAP,GAAA,QAAAQ,GAAAT,EAAAC,GAAA,IAAA,GAAAS,KAAAV,GAAA,CAAA,GAAAW,GAAAX,EAAAU,EAAA,KAAAH,EAAAI,EAAA,MAAAP,EAAAO,KAAAT,EAAA,MAAA,OAAAD,GAAAU,EAAA,OAAA,EAAA,QAAAC,GAAAZ,EAAAC,EAAAS,GAAA,IAAA,GAAAC,KAAAX,GAAA,CAAA,GAAAa,GAAAZ,EAAAD,EAAAW,GAAA,IAAAE,IAAAX,EAAA,OAAA,IAAAQ,EAAAV,EAAAW,GAAAL,EAAAO,EAAA,YAAAA,EAAAC,KAAAJ,GAAAT,GAAAY,EAAA,OAAA,EAAA,QAAAE,GAAAf,EAAAC,EAAAC,GAAA,GAAAQ,GAAAV,EAAAgB,OAAA,GAAAC,cAAAjB,EAAAkB,MAAA,GAAAP,GAAAX,EAAA,IAAAmB,EAAAC,KAAAV,EAAA,KAAAA,GAAAW,MAAA,IAAA,OAAAf,GAAAL,EAAA,WAAAK,EAAAL,EAAA,aAAAQ,EAAAE,EAAAV,IAAAU,GAAAX,EAAA,IAAAsB,EAAAF,KAAAV,EAAA,KAAAA,GAAAW,MAAA,KAAAT,EAAAD,EAAAV,EAAAC,IAAA,GAAAqB,GAAAC,EAAAb,KAAAc,EAAAxB,EAAAyB,gBAAAC,EAAA,YAAAC,EAAA3B,EAAA4B,cAAAF,GAAAvB,EAAAwB,EAAAE,MAAAC,EAAA,4BAAAV,MAAA,KAAAW,EAAA,kBAAAb,EAAAa,EAAAX,MAAA,KAAAC,EAAAU,EAAAC,cAAAZ,MAAA,KAAAa,KAAAC,KAAAC,EAAAD,EAAAjB,MAAAmB,EAAA,SAAArC,EAAAE,EAAAQ,EAAAC,GAAA,GAAAE,GAAAe,EAAAxB,EAAAkC,EAAAC,EAAAtC,EAAA4B,cAAA,OAAAE,EAAA9B,EAAAuC,KAAAR,EAAAD,GAAA9B,EAAA4B,cAAA,OAAA,IAAAY,SAAA/B,EAAA,IAAA,KAAAA,KAAAN,EAAAH,EAAA4B,cAAA,OAAAzB,EAAAsC,GAAA/B,EAAAA,EAAAD,GAAAiB,GAAAjB,EAAA,GAAA6B,EAAAI,YAAAvC,EAAA,OAAAS,IAAA,SAAA,eAAAc,EAAA,KAAA3B,EAAA,YAAAoB,KAAA,IAAAmB,EAAAG,GAAAf,GAAAI,EAAAQ,EAAAP,GAAAY,WAAA/B,EAAAmB,EAAAW,YAAAJ,GAAAR,IAAAC,EAAAF,MAAAe,WAAA,GAAAb,EAAAF,MAAAgB,SAAA,SAAAR,EAAAb,EAAAK,MAAAgB,SAAArB,EAAAK,MAAAgB,SAAA,SAAArB,EAAAkB,YAAAX,IAAAJ,EAAA1B,EAAAqC,EAAAvC,GAAA+B,EAAAQ,EAAAQ,WAAAC,YAAAT,IAAAP,EAAAe,WAAAC,YAAAhB,GAAAP,EAAAK,MAAAgB,SAAAR,KAAAV,GAAAqB,KAAAC,cAAA1B,GAAAlB,EAAA2C,EAAA,cAAA3C,EAAA2C,EAAAE,KAAA,aAAA,SAAAnD,EAAAC,GAAA,MAAAA,KAAAD,IAAAM,EAAAN,EAAAoD,YAAAC,UAAApD,GAAA,cAAA,SAAAD,EAAAC,GAAA,MAAAgD,GAAAE,KAAAnD,EAAAC,IAAAqD,SAAAD,UAAAvC,OAAAwC,SAAAD,UAAAvC,KAAA,SAAAb,GAAA,GAAAC,GAAAqD,IAAA,IAAA,kBAAArD,GAAA,KAAA,IAAAsD,UAAA,IAAA9C,GAAA0B,EAAAe,KAAAM,UAAA,GAAA9C,EAAA,WAAA,GAAA4C,eAAA5C,GAAA,CAAA,GAAAX,GAAA,YAAAA,GAAAqD,UAAAnD,EAAAmD,SAAA,IAAAxC,GAAA,GAAAb,GAAAyB,EAAAvB,EAAAwD,MAAA7C,EAAAH,EAAAiD,OAAAvB,EAAAe,KAAAM,YAAA,OAAAG,QAAAnC,KAAAA,EAAAA,EAAAZ,EAAA,MAAAX,GAAAwD,MAAAzD,EAAAS,EAAAiD,OAAAvB,EAAAe,KAAAM,aAAA,OAAA9C,KAAAuB,EAAA2B,MAAA,WAAA,GAAA3D,EAAA,OAAA,gBAAAF,IAAAA,EAAA8D,eAAA7D,YAAA6D,eAAA5D,GAAA,EAAAmC,GAAA,WAAAN,EAAAX,KAAA,oBAAAO,EAAA,IAAA,2CAAAP,KAAA,IAAA,SAAApB,GAAAE,EAAA,IAAAF,EAAA+D,YAAA7D,GAAAgC,EAAA8B,cAAA,WAAA,QAAAjD,EAAA,cAAAmB,EAAA+B,gBAAA,WAAA,GAAAjE,KAAAe,EAAA,cAAA,OAAAf,IAAA,qBAAAyB,GAAAK,OAAAO,EAAA,mGAAA,SAAApC,EAAAC,GAAAF,EAAA,IAAAC,EAAAiE,YAAA,IAAAjE,EAAAkE,eAAAnE,GAAAkC,EAAAkC,SAAA,WAAA,GAAApE,EAAA,OAAAqC,GAAA,sDAAA,SAAAnC,EAAAQ,GAAA,GAAAC,GAAAV,EAAAoE,eAAA,cAAAxD,EAAAF,EAAA2D,OAAA3D,EAAA4D,WAAA9C,EAAAZ,EAAAA,EAAA2D,UAAA3D,EAAA2D,SAAA,GAAA3D,EAAA2D,SAAA,GAAAnE,QAAAQ,EAAAR,SAAA,GAAA,EAAAL,GAAA,OAAAyE,KAAAhD,IAAA,IAAAA,EAAAjB,QAAAE,EAAAW,MAAA,KAAA,MAAArB,EAAA,KAAA,GAAA0E,KAAAxC,GAAAV,EAAAU,EAAAwC,KAAAnD,EAAAmD,EAAAzC,cAAAtB,EAAAY,GAAAW,EAAAwC,KAAAvC,EAAAwC,MAAAhE,EAAAY,GAAA,GAAA,OAAAA,GAAA,OAAAZ,GAAAiE,QAAA,SAAA5E,EAAAC,GAAA,GAAA,gBAAAD,GAAA,IAAA,GAAAU,KAAAV,GAAAwB,EAAAxB,EAAAU,IAAAC,EAAAiE,QAAAlE,EAAAV,EAAAU,QAAA,CAAA,GAAAV,EAAAA,EAAAiC,cAAAtB,EAAAX,KAAAE,EAAA,MAAAS,EAAAV,GAAA,kBAAAA,GAAAA,IAAAA,EAAAwB,EAAAoD,WAAA,cAAA5E,EAAA,GAAA,OAAAD,EAAAW,EAAAX,GAAAC,EAAA,MAAAU,IAAAR,EAAA,IAAAyB,EAAA,KAAAjB,EAAAmE,SAAA,QAAAnE,EAAAoE,UAAAhD,EAAApB,EAAAqE,aAAA1D,EAAAX,EAAAsE,eAAA9D,EAAAR,EAAAuE,SAAA,SAAAlF,GAAA,MAAAS,IAAAT,KAAAW,EAAAwE,aAAApE,EAAAJ,EAAAyE,WAAA/C,EAAAZ,EAAAoD,UAAApD,EAAAoD,UAAAQ,QAAA,oBAAA,QAAA,yBAAAlD,EAAAf,KAAA,cAAAT,GAAA4C,KAAAA,KAAA+B,SCHA,IAAAC,4BACA,eACA,YACA,yBACA,cAEAC,cAAAC,QAAAC,OAAA,gBAAAH,0BAEAC,eAAAG,QAAA,wBAAA,KAAA,aAAA,SAAAC,GAAAC,YACA,GAAAC,wBAuBA,OArBAA,sBAAAC,cAAA,SAAAC,WAQA,MAPAA,WAAAC,MAAAD,UAAAC,KAAAC,SACAL,WAAAM,WAAA,mBACAC,KAAA,QACAC,OAAAL,UAAAM,OAAAC,OAAAP,UAAAM,OAAAE,IAAAR,UAAAS,OAAAT,UAAAU,WAAAV,UAAAC,KAAAC,SAAA9E,KAAA,KACA8E,QAAAF,UAAAC,KAAAU,aAGAf,GAAAgB,OAAAZ,YAEAF,qBAAAe,aAAA,SAAAb,WAQA,MAPAA,WAAAC,MAAAD,UAAAC,KAAAC,SACAL,WAAAM,WAAA,mBACAC,KAAA,QACAC,OAAAL,UAAAM,OAAAC,OAAAP,UAAAM,OAAAE,IAAAR,UAAAS,OAAAT,UAAAU,WAAAV,UAAAC,KAAAC,SAAA9E,KAAA,KACA8E,QAAAF,UAAAC,KAAAU,aAGAf,GAAAgB,OAAAZ,YAGAF,wBAGAN,cAAAc,QAAA,gBAAA,qBAAA,SAAAQ,cAAAC,oBACAD,cAAAE,aAAArC,KAAA,wBAEAoC,mBAAAE,yBAAA,sBACAF,mBAAAG,aAAAC,SAAA,4BACAJ,mBAAAK,kBAAA,QCxCA,IAAA5B,eAAAC,QAAAC,OAAA,gBAEAF,eAAA6B,QAAA,iBAAA,YAAA,SAAAC,WACA,OACAC,WAAA,SAAAC,WAAAC,WAAAC,aACAJ,UAAAK,MACAF,WAAAA,WACAC,YAAAA,YACAE,SACAJ,WAAA,WACA,MAAAA,qBAQAhC,cAAA6B,QAAA,mBAAA,QAAA,SAAAQ,OACA,OACAC,aAAA,SAAA7B,MACA,MAAA4B,OAAAE,KAAA,yBAAA9B,WAKAT,cAAA6B,QAAA,mBAAA,QAAA,SAAAQ,OACA,OACAG,mBAAA,WACA,MAAAH,OAAAI,IAAA,4BAAA,GAAAC,OAAAC,gBAKA3C,cAAA6B,QAAA,oBAAA,QAAA,SAAAQ,OACA,OACAO,kBAAA,SAAAC,WACA,MAAAR,OAAAI,IAAA,0CAAAI,UAAA,OAAA,GAAAH,OAAAC,gBAKA3C,cAAA6B,QAAA,kBAAA,QAAA,SAAAQ,OACA,OACAS,uBAAA,SAAAC,UACA,MAAAV,OAAAE,KAAA,qCAAAQ,eAKA/C,cAAA6B,QAAA,yBAAA,QAAA,gBAAA,SAAAQ,MAAAW,eACA,OACAC,uBAAA,SAAAC,WAOA,QALAC,EAAAC,KAAAJ,cAAA,sBAAA,SAAA9F,IAAA,MAAAA,MAAAgG,aAOAG,WAAA,SAAAH,WACAF,cAAA,wBACAA,cAAA,0BAEAA,cAAA,sBAAA7D,KAAA+D,WACAC,EAAAG,KAAAN,cAAA,wBAEAO,eAAA,WACA,IAAAP,cAAA,sBAEA,YADAA,cAAA,yBAGA,IAAAQ,OACA,KAAApH,EAAA,EAAAA,EAAA4G,cAAA,sBAAAS,OAAArH,IACAoH,IAAArE,KAAA,cAAA6D,cAAA,sBAAA5G,GAEA,OAAAoH,KAAA5H,KAAA,MAEA8H,iBAAA,WAEA,MADAV,eAAA,sBAAAA,cAAA,sBAAAS,OAAA,GAGAE,iBAAA,WACAX,cAAA,0BAEAY,cAAA,SAAAV,WACAF,cAAA,sBAAAG,EAAAU,QAAAb,cAAA,sBAAAE,gBAKAlD,cAAA6B,QAAA,kBAAA,QAAA,SAAAQ,MAAAW,eACA,OACAc,WAAA,SAAAC,YACA,MAAA1B,OAAAI,IAAA,qCAAAsB,WAAA,OAAA,GAAArB,OAAAC,YAEAqB,YAAA,SAAAD,YACA,MAAA1B,OAAAI,IAAA,0BAAAsB,WAAA,OAAA,GAAArB,OAAAC,YAEAsB,OAAA,SAAAC,UACA,MAAA7B,OAAAE,KAAA,+BAAA2B,WAEAC,iBAAA,SAAAD,UACA,MAAA7B,OAAAE,KAAA,kCAAA2B,eAKAlE,cAAA6B,QAAA,eAAA,QAAA,SAAAQ,OACA,OACA+B,QAAA,WACA,MAAA/B,OAAAI,IAAA,yBAAA,GAAAC,OAAAC,YAEA0B,kBAAA,WACA,MAAAhC,OAAAI,IAAA,oCAAA,GAAAC,OAAAC,YAEA2B,YAAA,SAAApB,UAAAqB,UACA,MAAAlC,OAAAE,KAAA,4BAAArF,GAAAgG,UAAAqB,SAAAA,YAEAC,uBAAA,SAAAC,WAAAF,UACA,MAAAlC,OAAAqC,IAAA,4BAAAD,WAAAA,WAAAF,SAAAA,YAEAI,eAAA,SAAAF,YACA,MAAApC,OAAAuC,OAAA,uCAAAH,aAEAI,oBAAA,SAAAJ,WAAAK,UACA,MAAAzC,OAAAqC,IAAA,kCAAAD,WAAAA,WAAAK,SAAAA,YAEAC,UAAA,WACA,MAAA1C,OAAAE,KAAA,6BAEAyC,aAAA,WACA,MAAA3C,OAAAI,IAAA,8BAAA,GAAAC,OAAAC,YAEAsC,kBAAA,SAAAC,aACA,MAAA7C,OAAAI,IAAA,2BAAAyC,YAAA,eAAA,GAAAxC,OAAAC,YAEAwC,UAAA,SAAAC,YACA,MAAA/C,OAAAE,KAAA,8BAAA6C,aAEAC,aAAA,WACA,MAAAhD,OAAAuC,OAAA,+BAEAU,oBAAA,SAAAC,UACA,MAAAlD,OAAAE,KAAA,+BAAAgD,WAEAC,mBAAA,SAAAC,SACA,MAAApD,OAAAE,KAAA,8BAAAkD,UAEAC,4BAAA,SAAAC,YACA,MAAAtD,OAAAI,IAAA,gCAAAkD,WAAA,uBAAA,GAAAjD,OAAAC,YAEAiD,2BAAA,WACA,MAAAvD,OAAAI,IAAA,wCAAA,GAAAC,OAAAC,YAEAkD,uBAAA,SAAAC,MACA,MAAAzD,OAAAE,KAAA,iCAAAuD,OAEAC,kBAAA,WACA,MAAA1D,OAAAuC,OAAA,mCAEAoB,YAAA,SAAAC,cACA,MAAA5D,OAAAE,KAAA,iCAAA0D,eAEAC,kBAAA,SAAAC,aACA,MAAA9D,OAAAqC,IAAA,8BAAA0B,QAAAD,mBAKAnG,cAAA6B,QAAA,eAAA,QAAA,SAAAQ,OACA,OACAgE,YAAA,SAAAC,UACA,MAAAjE,OAAAI,IAAA,uBAAA6D,SAAA,OAAA,GAAA5D,OAAAC,YAEA4D,SAAA,SAAArD,UAAAoD,UACA,MAAAjE,OAAAI,IAAA,uBAAA6D,SAAA,UAAApD,UAAA,gBAAA,GAAAR,OAAAC,YAEA6D,oBAAA,SAAAtD,UAAAuD,WACA,MAAApE,OAAAE,KAAA,2CAAAW,UAAAA,UAAAuD,UAAAA,aAEAnC,YAAA,SAAApB,UAAAoD,UACA,MAAAjE,OAAAE,KAAA,6BAAAW,UAAAA,UAAAoD,SAAAA,YAEA3B,eAAA,SAAAF,WAAA6B,UACA,MAAAjE,OAAAuC,OAAA,uBAAA0B,SAAA,UAAA7B,iBAKAzE,cAAA6B,QAAA,uBAAA,QAAA,SAAAQ,OACA,OACAqE,uBAAA,WACA,MAAArE,OAAAI,IAAA,yCAAA,GAAAC,OAAAC,YAEAgE,gBAAA,SAAAC,QACA,MAAAvE,OAAAI,IAAA,+BAAAmE,OAAA,OAAA,GAAAlE,OAAAC,YAEAkE,0BAAA,SAAAD,QACA,MAAAvE,OAAAI,IAAA,+BAAAmE,OAAA,kBAAA,GAAAlE,OAAAC,YAEAmE,yBAAA,SAAA5D,UAAAqB,UACA,MAAAlC,OAAAE,KAAA,6CAAAW,UAAAA,UAAAqB,SAAAA,YAEAwC,8BAAA,SAAAC,mBAAAC,aACA,MAAA5E,OAAAuC,OAAA,+BAAAoC,mBAAA,UAAAC,cAEAC,mBAAA,SAAAF,mBAAAG,cACA,MAAA9E,OAAAE,KAAA,+BAAAyE,mBAAA,UAAAG,eAEAC,mBAAA,SAAAJ,oBACA,MAAA3E,OAAAE,KAAA,+BAAAyE,mBAAA,YAEAK,mBAAA,SAAAL,mBAAAG,cACA,MAAA9E,OAAAqC,IAAA,+BAAAsC,mBAAA,UAAAG,eAEAG,UAAA,SAAAN,mBAAAG,cACA,MAAA9E,OAAAE,KAAA,+BAAAyE,mBAAA,UAAAG,eAEAI,oBAAA,SAAAP,mBAAAG,cACA,MAAA9E,OAAAE,KAAA,+BAAAyE,mBAAA,WAAAG,mBAKAnH,cAAA6B,QAAA,yBAAA,QAAA,SAAAQ,OACA,OACAmF,uBAAA,SAAAC,aACA,MAAApF,OAAAE,KAAA,gCAAAkF,kBAKAzH,cAAA6B,QAAA,gBAAA,QAAA,SAAAQ,OACA,OACAqF,SAAA,SAAAC,aACA,MAAAtF,OAAAI,IAAA,wBAAAkF,YAAA,OAAA,GAAAjF,OAAAC,eC7OA,IAAA3C,eAAAC,QAAAC,OAAA,gBAGAF,eAAAiC,WAAA,kBAAA,SAAA,YAAA,UAAA,kBAAA,4BACA,SAAA2F,OAAAC,UAAAC,QAAAC,gBAAAC,aAGAJ,OAAAK,WAEAL,OAAAM,OAAA,WACAN,OAAAO,YAAAN,UAAAO,OAAAvI,QAAA,IAAA,MAGA+H,OAAAS,IAAA,kBAAA,SAAAC,MAAA7H,MACAmH,OAAAW,uBAAA9H,KACAmH,OAAAW,uBAAAC,gBAAA,IAGAZ,OAAAa,0BAAA,WACAb,OAAAW,uBAAAC,gBAAAZ,OAAAW,uBAAAC,gBAGAZ,OAAAc,kBAAA,WACAd,OAAAW,uBAAA,MAIAX,OAAAe,cAAA,SAAAC,QACAd,QAAAe,SAAAC,KAAAF,QAIAhB,OAAAmB,cAAA,SAAAC,MACAnB,UAAAmB,KAAAA,MACApB,OAAAO,YAAAN,UAAAO,OAAAvI,QAAA,IAAA,KAGA+H,OAAAqB,iBAAA,SAAAC,SACA,GAAAC,oBAAAD,QAAAE,UAAA,IAAAF,QAAAG,SAAA,IAQA,OAPAF,qBAAAD,QAAAI,aAAAJ,QAAAI,aAAA,KAAA,GACAH,oBAAAD,QAAAK,YAAA,KACAJ,oBAAAD,QAAAM,WAAAN,QAAAM,WAAA,KAAA,GACAL,oBAAAD,QAAAO,KAAA,IACAN,oBAAAD,QAAAQ,MAAA,KACAP,oBAAAD,QAAAS,MAAAT,QAAAS,MAAA,GACAR,oBAAAD,QAAAU,YAIAhC,OAAAiC,cAAA,SAAAC,KACA,GAAAC,KAAAC,KAAA,CACA,KAAAD,MAAAD,KACAA,IAAApM,eAAAqM,MACAC,MAGA,OAAAA,OAGAhC,YAAAiC,YAAArC,OAAAqC,YAAA,WACAlC,gBAAAvF,qBAAA0H,KAAA,SAAAC,UACA,GAAAC,WAAA,CACAjH,GAAAkH,KAAAF,SAAA1J,KAAA6J,UAAA,SAAApB,SACAA,QAAAhM,GAAAkN,UACAA,cAEAD,SAAA1J,KAAA8J,UAAA,YAAAJ,SAAA1J,KAAA+J,WACAxC,YAAAyC,SAAA7C,OAAA6C,SAAAN,SAAA1J,QAIAmH,OAAAqC,iBAGA9J,QAAA,4BAAA,WACA,UC3EA,IAAAH,eAAAC,QAAAC,OAAA,gBAEAF,eAAAiC,WAAA,kBAAA,aAAA,SAAA,WAAA,cAAA,iBAAA,SAAA5B,WAAAuH,OAAA8C,SAAAC,YAAAC,gBAgHA,QAAAxG,WACAwD,OAAAiD,gBAAA,EACAF,YAAAvG,UAAA8F,KAAA,SAAAC,UACA,GAAAW,MAAAX,SAAA1J,IACAqK,MAAAC,oBAAA5H,EAAAC,KAAA0H,KAAAE,mBAAA7H,EAAAC,KAAA0H,KAAAG,MAAA,SAAAC,MAAA,MAAA/H,GAAAC,KAAA8H,KAAAF,oBACApD,OAAAkD,KAAAA,KACAlD,OAAAiD,gBAAA,GACA,SAAAV,UACAvC,OAAAiD,gBAAA,IAvHA,GAAAM,QA2GA,WACA/G,aAxGAwD,OAAAwD,YAAA,SAAAC,MACAzD,OAAA0D,SAAAD,MAGAzD,OAAApD,uBAAA,SAAAC,WAAAF,UACA,GAAAgH,UAAApI,EAAAqI,KAAA5D,OAAAkD,KAAAG,MAAA,SAAA7O,GAAA,MAAAA,GAAAc,IAAAuH,YACA,OAAA8G,UAAAhH,SAAA,GAAAqD,OAAAiD,gBAAAjD,OAAA0D,SAAAG,UAAA,CAGA,GAAAC,iBAAAH,SAAAhH,QACAgH,UAAAhH,SAAAA,SACAmG,SAAAiB,OAAAR,OACAA,MAAAT,SAAA,WACA9C,OAAAiD,gBAAA,EACAF,YAAAnG,uBAAAC,WAAAF,UAAA2F,KAAA,SAAAC,UACA/F,UACA/D,WAAAM,WAAA,qBACA,SAAAwJ,UACAoB,SAAAhH,SAAAmH,gBACA9D,OAAAiD,gBAAA,KAEA,OAGAjD,OAAA/C,oBAAA,SAAAJ,WAAAK,UACA3B,EAAAqI,KAAA5D,OAAAkD,KAAAG,MAAA,SAAA7O,GAAA,MAAAA,GAAAc,IAAAuH,eACAmD,OAAAiD,iBAGAjD,OAAAiD,gBAAA,EACAF,YAAA9F,oBAAAJ,WAAAK,UAAAoF,KAAA,SAAAC,UACA/F,UACA/D,WAAAM,WAAA,qBACA,SAAAwJ,UACAvC,OAAAkD,KAAAG,MAAAW,aACAhE,OAAAiD,gBAAA,MAGAjD,OAAAjD,eAAA,SAAAF,YACA,GAAA8G,UAAApI,EAAAqI,KAAA5D,OAAAkD,KAAAG,MAAA,SAAA7O,GAAA,MAAAA,GAAAc,IAAAuH,YACA,IAAA8G,WAAA3D,OAAAiD,eAAA,CAGAjD,OAAAiD,gBAAA,CACA,IAAAe,cAAA3L,QAAA4L,KAAAjE,OAAAkD,KAAAG,MACArD,QAAAkE,4BAAA,EACAlE,OAAAkD,KAAAG,MAAA9H,EAAAU,QAAA+D,OAAAkD,KAAAG,MAAAM,UACAZ,YAAAhG,eAAAF,YAAAyF,KAAA,SAAAC,UACA/F,UACA/D,WAAAM,WAAA,qBACA,SAAAwJ,UACAvC,OAAAkD,KAAAG,MAAAW,aACAhE,OAAAiD,gBAAA,MAIAjD,OAAAmE,WAAA,WACAnE,OAAA0D,SAAAU,gBACApE,OAAA0D,SAAAG,UAGAd,YAAAzE,kBAAA0B,OAAAkD,KAAA1E,SAAA8D,KAAA,SAAA+B,MACArE,OAAAe,cAAAf,OAAAK,QAAA,oBAIAL,OAAAsE,cAAA,WACAtE,OAAAuE,oBAAA,KACAvE,OAAAwE,mBACA1B,SAAAiB,OAAAR,OACAA,MAAAT,SAAA,WACA9C,OAAAyE,yBAAA,CACA,IAAAnI,WACAoI,QAAA1E,OAAAwE,iBACAG,MAAA,EACAC,SAAA,EAEA5B,gBAAA3G,OAAAC,UAAAgG,KAAA,SAAAC,UACAvC,OAAAyE,yBAAA,EACAzE,OAAAuE,oBAAAhC,SAAA1J,KAAAsC,UACA,SAAAoH,UACAvC,OAAAyE,yBAAA,KAEA,OAIAzE,OAAA6E,sBAAA,SAAAC,SACA9E,OAAAuE,oBAAA,KACAvE,OAAA+E,wBAAAD,QACA9E,OAAAwE,iBAAAM,QAAAE,MAGAhF,OAAAiF,iBAAA,SAAAH,QAAAnI,UACAqD,OAAAiD,gBAAA,EACAF,YAAArG,YAAAoI,QAAAxP,GAAAqH,UAAA2F,KAAA,SAAAC,UACA/F,UACAwD,OAAAwE,iBAAA,KACAxE,OAAA+E,wBAAA,KACAtM,WAAAM,WAAA,0BAqBAX,cAAAiC,WAAA,qBAAA,SAAA,cAAA,SAAA2F,OAAA+C,aAOA,QAAAtG,qBACAsG,YAAAtG,oBAAA6F,KAAA,SAAAC,UACAvC,OAAAkF,eAAA3C,SAAA1J,OARA4D,oBAEAuD,OAAAS,IAAA,mBAAA,SAAAC,MAAA7H,MACA4D,yBAUArE,cAAAiC,WAAA,yCAAA,SAAA,UAAA,oBAAA,aAAA,SAAA2F,OAAAE,QAAAiF,kBAAA/K,YACA4F,OAAAS,IAAA,mBAAA,SAAAC,MAAA7H,MACAuB,WAAAgL,SAAA,IAGApF,OAAA5F,WAAAA,WAEA4F,OAAAqF,MAAA,WACAF,kBAAAE,SAGArF,OAAAsF,SAAA,SAAAlM,KACA8G,QAAAe,SAAA7H,OCzJA,IAAAhB,eAAAC,QAAAC,OAAA,gBAEAF,eAAAiC,WAAA,0BAAA,aAAA,SAAA,UAAA,YAAA,sBAAA,cACA,SAAA5B,WAAAuH,OAAAE,QAAAD,UAAAsF,oBAAAxC,aAgMA,QAAAhE,iBAAAC,QACAuG,oBAAAxG,gBAAAC,QAAAsD,KAAA,SAAAC,UACA,GAAAhD,cAAAgD,SAAA1J,IACA0G,cAAAiG,iBACAxF,OAAA6C,SAAAH,WAAA1C,OAAA6C,SAAAH,UAAA7G,QACA0D,aAAAiG,eAAAnN,QAAA4L,KAAAjE,OAAA6C,SAAAH,UAAA,IACAnD,aAAAiG,eAAAxM,KAAA,UACAuG,aAAAiG,eAAAlI,aACAD,kBAAA,UAAAkC,aAAAiG,eAAAlI,cAGAiC,aAAAiG,gBACAhE,UAAAxB,OAAA6C,SAAArB,UACAC,SAAAzB,OAAA6C,SAAApB,WAIAlG,EAAAkH,KAAAlD,aAAA8D,MAAA,SAAAoC,WACA,GAAAjR,GAAA,CACA+G,GAAAkH,KAAAgD,UAAAC,eAAA,SAAAC,WACAA,UAAArQ,GAAAd,EACAiR,UAAAG,kBAAAjJ,UAAAgJ,UAAAhJ,WACA8I,UAAAG,kBAAAD,WAEAnR,QAGA+K,aAAAsG,sBAAA,EACA7F,OAAAT,aAAAA,eAIA,QAAAnC,gBACA2F,YAAA3F,eAAAkF,KAAA,SAAAC,UACAvC,OAAA8F,UAAAvD,SAAA1J,OAIA,QAAAwE,mBAAA0I,YAAAzI,aACAyF,YAAA1F,kBAAAC,aAAAgF,KAAA,SAAAC,UACA,GAAAyD,gBAAAzD,SAAA1J,IACA,YAAAkN,cACA/F,OAAAiG,sBAAAD,oBAEA,YAAAD,cACA/F,OAAAkG,uBAAAF,sBAKA,QAAAG,aAAA5G,cACA,GAAA6G,wBACA9Q,GAAAiK,aAAAjK,GACA+Q,IAAA9G,aAAA8G,IACAhN,OAAAkG,aAAAlG,OACAmF,QAAAe,aAAAf,QACAgH,eAAAjG,aAAAiG,eACAc,gBAAA/G,aAAA+G,gBACAjD,SAqBA,OAnBA9H,GAAAkH,KAAAlD,aAAA8D,MAAA,SAAAoC,WACA,GAAAc,qBACAjR,GAAAmQ,UAAAnQ,GACAkJ,QAAAiH,UAAAjH,QACAoH,mBACAY,MAAAf,UAAAG,kBAAAY,MAAAC,OACA9J,SAAA8I,UAAAG,kBAAAjJ,UAEA+I,kBAEAnK,GAAAkH,KAAAgD,UAAAC,eAAA,SAAAC,WACAY,mBAAAb,eAAAnO,MACAiP,MAAAb,UAAAa,MAAAC,OACA9J,SAAAgJ,UAAAhJ,aAGAyJ,sBAAA/C,MAAA9L,KAAAgP,sBAGAH,uBA3FA,WACA,GAAAhH,oBAAAa,UAAA7G,MAAAnB,QAAA,IAAA,KAAAiI,QAAAwG,yBACA1G,QAAA2G,eAAA,KACA3G,OAAA4G,gBAAA,KACAxJ,eACAgC,mBACAL,gBAAAK,oBAEAY,OAAAT,cAAAsH,WAAA,MAzLA7G,OAAA8G,oBAAA,SAAArD,MACAzD,OAAA+G,iBAAAtD,MAGAzD,OAAAgH,mBAAA,SAAAC,UACA,MAAA1L,GAAAoD,SAAAsI,SAAAjH,OAAAT,aAAAlG,SAGA2G,OAAAkH,aAAA,SAAAzB,WACAA,UAAAC,eAAAnO,MACAjC,GAAAmQ,UAAAC,eAAA7J,OAAA,EACA2K,MAAAf,UAAA0B,UACAxK,SAAA,KAIAqD,OAAAoH,wBAAA,SAAAzB,UAAAhJ,UACAA,SAAA,GAAAA,SAAA0K,QAGA1B,UAAAhJ,SAAAA,WAGAqD,OAAAsH,gBAAA,SAAA7B,UAAAE,WACAF,UAAAC,eAAAnK,EAAAU,QAAAwJ,UAAAC,eAAAC,YAGA3F,OAAAb,8BAAA,SAAAsG,WACA,GAAA8B,mBAAAlP,QAAA4L,KAAAjE,OAAAT,aAAA8D,MACArD,QAAAT,aAAA8D,MAAA9H,EAAAU,QAAA+D,OAAAT,aAAA8D,MAAAoC,WACAF,oBAAApG,8BAAAa,OAAAT,aAAAjK,GAAAmQ,UAAAnQ,IAAAgN,KAAA,SAAAC,UACAxD,gBAAAiB,OAAAT,aAAAjK,IACAmD,WAAAM,WAAA,mCACA,SAAAwJ,UACAvC,OAAAT,aAAA8D,MAAAkE,qBAIAvH,OAAAwH,WAAA,SAAAzB,YAAApE,aACA,GAAA8F,SAAAlM,EAAAqI,KAAA5D,OAAA8F,UAAA,SAAAhT,GAAA,MAAAA,GAAAkS,MAAArD,aACA8F,WAGA,WAAA1B,cACA/F,OAAA2G,eAAAc,QACAzH,OAAAiG,yBACAjG,OAAAT,aAAAiG,eAAAlI,YAAAmK,QAAAC,OAAAD,QAAAE,MACA3H,OAAAT,aAAAiG,eAAAoC,SAAA,KACA5H,OAAAT,aAAAiG,eAAA5D,WAAA,MAEA,YAAAmE,cACA/F,OAAA4G,gBAAAa,QACAzH,OAAAkG,0BACAlG,OAAAT,aAAA+G,gBAAAhJ,YAAAmK,QAAAC,OAAAD,QAAAE,MACA3H,OAAAT,aAAA+G,gBAAAsB,SAAA,KACA5H,OAAAT,aAAA+G,gBAAA1E,WAAA,MAEA6F,QAAAC,OACArK,kBAAA0I,YAAA0B,QAAAC,SAIA1H,OAAA6H,iBAAA,SAAA9B,aACA,GAAA,WAAAA,YAAA,CACA,GAAA+B,eAAAvM,EAAAqI,KAAA5D,OAAAiG,sBAAA,SAAA8B,GAAA,MAAAA,GAAA/C,MAAAhF,OAAAT,aAAAiG,eAAA5D,YACA,KAAAkG,cACA,MAEA9H,QAAAT,aAAAiG,eAAAoC,SAAAE,cAAAE,KAEA,GAAA,YAAAjC,YAAA,CACA,GAAA+B,eAAAvM,EAAAqI,KAAA5D,OAAAkG,uBAAA,SAAA6B,GAAA,MAAAA,GAAA/C,MAAAhF,OAAAT,aAAA+G,gBAAA1E,YACA,KAAAkG,cACA,MAEA9H,QAAAT,aAAA+G,gBAAAsB,SAAAE,cAAAE,OAIAhI,OAAAiI,sBAAA,SAAAlC,aACA,GAAA,YAAAA,YAAA,CACA,GAAAP,gBAAAjK,EAAAqI,KAAA5D,OAAA6C,SAAAH,UAAA,SAAA9P,GAAA,MAAAA,GAAA0C,KAAA0K,OAAAT,aAAAiG,eAAAlQ,IACAkQ,kBACAA,eAAAxM,KAAA,UACAwM,eAAAlI,aACAD,kBAAA,UAAAmI,eAAAlI,aAEA0C,OAAAT,aAAAiG,eAAAnN,QAAA4L,KAAAuB,iBAGA,GAAA,aAAAO,YAAA,CACA,GAAAO,iBAAA/K,EAAAqI,KAAA5D,OAAA6C,SAAAH,UAAA,SAAA9P,GAAA,MAAAA,GAAA0C,KAAA0K,OAAAT,aAAA+G,gBAAAhR,IACAgR,mBACAA,gBAAAtN,KAAA,WACAsN,gBAAAhJ,aACAD,kBAAA,WAAAiJ,gBAAAhJ,aAEA0C,OAAAT,aAAA+G,gBAAAjO,QAAA4L,KAAAqC,oBAKAtG,OAAAqB,iBAAA,SAAAC,SACA,GAAAA,QAAA,CAGA,GAAAC,oBAAAD,QAAAE,UAAA,IAAAF,QAAAG,SAAA,IAQA,OAPAF,qBAAAD,QAAAI,aAAAJ,QAAAI,aAAA,KAAA,GACAH,oBAAAD,QAAAK,YAAA,KACAJ,oBAAAD,QAAAM,WAAAN,QAAAM,WAAA,KAAA,GACAL,oBAAAD,QAAAO,KAAA,IACAN,oBAAAD,QAAAQ,MAAA,KACAP,oBAAAD,QAAAS,MAAAT,QAAAS,MAAA,GACAR,oBAAAD,QAAAU,aAIAhC,OAAAV,mBAAA,WACAU,OAAA+G,iBAAA3C,gBACApE,OAAA+G,iBAAAlD,WAGA7D,OAAAT,aAAAiG,eAAA0C,MAAAlI,OAAAT,aAAA2I,MACAlI,OAAAT,aAAA+G,kBACAtG,OAAAT,aAAA+G,gBAAA4B,MAAAlI,OAAAT,aAAA2I,OAEA3C,oBAAAjG,mBAAAU,OAAAT,aAAAjK,GAAA6Q,YAAAnG,OAAAT,eAAA+C,KAAA,SAAAC,UACAvC,OAAA6C,SAAAsF,iBACAnI,OAAAe,cAAAf,OAAAK,QAAA,yBAEAL,OAAAe,cAAAf,OAAAK,QAAA,qBAKAL,OAAAR,mBAAA,WACA+F,oBAAA/F,mBAAAQ,OAAAT,aAAAjK,IAAAgN,KAAA,SAAAC,UACAgD,oBAAAxG,gBAAAiB,OAAAT,aAAAjK,IAAAgN,KAAA,SAAAC,UACAvC,OAAAT,aAAAgD,SAAA1J,UAKAmH,OAAAoI,gBAAA,WACA7C,oBAAA7F,UAAAM,OAAAT,aAAAjK,GAAA6Q,YAAAnG,OAAAT,eAAA+C,KAAA,SAAAC,UACAvC,OAAAT,aAAA8I,OAAA9F,SAAA1J,QAIAmH,OAAAL,oBAAA,WACA4F,oBAAA5F,oBAAAK,OAAAT,aAAAjK,GAAA6Q,YAAAnG,OAAAT,eAAA+C,KAAA,SAAAC,UACAvC,OAAAe,cAAAf,OAAAK,QAAA,uCAIAL,OAAAsI,wBAAA,WACAtI,OAAAT,aAAAsG,uBACA7F,OAAAT,aAAA+G,gBAAA,OAIAtG,OAAAuI,gCAAA,WACAvI,OAAAT,aAAAiJ,+BACAxI,OAAAT,aAAA+G,gBAAAjO,QAAA4L,KAAAjE,OAAAT,aAAAiG,gBACAxF,OAAAT,aAAA+G,gBAAAtN,KAAA,WACAgH,OAAAT,aAAA+G,gBAAAhJ,cACA0C,OAAA4G,gBAAA5G,OAAA2G,eACAtJ,kBAAA,WAAA2C,OAAAT,aAAA+G,gBAAAhJ,gBAKA0C,OAAAyI,iBAAA,SAAAhD,WACA,GAAAiD,YAAAnN,EAAAoN,IAAAlD,UAAAC,eAAA,SAAAxR,GAAA,MAAAA,GAAAyI,UACA,OAAApB,GAAAG,KAAAgN,YAAA7M,QAAA4J,UAAAC,eAAA7J,WAkGAzD,cAAAiC,WAAA,mCAAA,SAAA,sBAAA,SAAA2F,OAAAuF,qBAOA,QAAAzG,0BACAyG,oBAAAzG,yBAAAwD,KAAA,SAAAC,UACAvC,OAAA4I,mBAAArG,SAAA1J,OARAiG,yBAEAkB,OAAAS,IAAA,iCAAA,SAAAC,MAAA7H,MACAiG,8BAUA1G,cAAAiC,WAAA,uDAAA,SAAA,UAAA,oBAAA,aACA,SAAA2F,OAAAE,QAAAiF,kBAAA/K,YAEA4F,OAAAS,IAAA,iCAAA,SAAAC,MAAA7H,MACAuB,WAAAgL,SAAA,IAGApF,OAAA5F,WAAAA,WAEA4F,OAAAqF,MAAA,WACAF,kBAAAE,SAGArF,OAAAsF,SAAA,SAAAlM,KACA8G,QAAAe,SAAA7H,QClTAf,QAAAC,OAAA,iBACAuQ,UAAA,sBACAvO,YAAA,mEACAwO,UACAxN,UAAA,IACAyN,WAAA,IACAC,YAAA,IACAC,YAAA,KAEA5O,YAAA,aAAA,iBAAA,gBAAA,wBAAA,SAAA5B,WAAAuK,eAAAkG,cAAAC,uBACA,GAAAC,OAAAjT,IAEAiT,OAAAC,gBAAA,EACA,SAAAD,MAAAL,aACAK,MAAAC,gBAAA,GAGAD,MAAAE,QAAA,WACAF,MAAAG,eAAAJ,sBAAA9N,uBAAA+N,MAAA9N,YAGA8N,MAAAI,wBAAA,SAAA9I,OACAA,MAAA+I,iBACAzG,eAAA9G,WAAAkN,MAAA9N,WAAAgH,KAAA,SAAAC,UACA,GAAAuC,SAAAvC,SAAA1J,KAAA,GACA6Q,gBAAAP,sBAAArN,kBACA,IAAA,GAAA4N,gBAEA,WADAR,eAAA/O,YAAAwP,kBAAA,GAAA,qCAAA,6CAGA,IAAAP,MAAAG,kBAAAG,gBAAA,GAKA,CACA,GAAAE,iBAAA9E,OAEA,YADAoE,eAAA/O,WAAAyP,gBAAA,qCAAA,8CANAT,sBAAA1N,WAAA2N,MAAA9N,WACA4N,cAAA/O,WAAA2K,QAAA,qCAAA,8CACArM,WAAAM,WAAA,6BAOAqQ,MAAAG,gBAAA,SCxCAlR,QAAAC,OAAA,iBACAuQ,UAAA,yBACAvO,YAAA,+BACAD,YAAA,wBAAA,SACA,SAAA8O,sBAAAnJ,QACA,GAAAoJ,OAAAjT,IACAiT,OAAAE,QAAA,WACAF,MAAAvC,WAAAsC,sBAAArN,oBAEAkE,OAAAS,IAAA,4BAAA,SAAAC,MAAA7H,MACAuQ,MAAAvC,WAAAsC,sBAAArN,wBCVA,IAAA1D,eAAAC,QAAAC,OAAA,gBACAF,eAAAiC,WAAA,gCAAA,aAAA,SAAA,iBAAA,wBACA,SAAA5B,WAAAuH,OAAAgD,eAAAmG,uBAkDA,QAAAU,gBAAA/E,SAOA,MANAvJ,GAAAkH,KAAAqC,QAAAgF,WAAA,SAAAC,UACAA,SAAAzO,UAAAwJ,QAAAxP,GACA,WAAAyU,SAAAC,UAAAnV,gBACAkV,SAAAE,MAAAC,aAAAH,SAAAE,UAGAnF,QAyBA,QAAAoF,cAAAlL,QACA,GAAAmL,OAAAC,WAAApL,OACA,OAAAqI,OAAA8C,OAAAnL,OAAAmL,MAlFAnK,OAAA8J,cACA9J,OAAA7E,YA0BA6E,OAAAqK,qBAAA,WACA,GAAA9O,EAAA+O,QAAAtK,OAAA7E,UACA,QACA,IAAAoP,YACAT,WAAAvO,EAAAiP,QAAAjP,EAAAoN,IAAA3I,OAAA7E,SAAA,SAAA2J,SAAA,MAAAA,SAAAgF,cACAW,qBAAAlP,EAAAG,KAAAH,EAAAoN,IAAAmB,WAAA,SAAAC,UAAA,MAAAA,UAAAW,cACAnP,GAAAkH,KAAAgI,qBAAA,SAAAC,aACAH,QAAAG,eACA,IAAAC,OAAApP,EAAAqP,MAAAd,YAAAY,YAAAA,aACAnP,GAAAkH,KAAAzC,OAAA7E,SAAA,SAAA2J,SACA,GAAA+F,iBAAAtP,EAAAqI,KAAA+G,MAAA,SAAAG,MAAA,MAAAA,MAAAxP,YAAAwJ,QAAAxP,IACAuV,iBACAN,QAAAG,aAAAnT,KAAAsT,iBAEAN,QAAAG,aAAAnT,MAAAyS,UAAA,YAAAC,MAAA,UAIAjK,OAAA8J,WAAAS,SAaAvK,OAAA+K,UAAA,SAAAjB,WAAAkB,iBACA,GAAAC,cAAA1P,EAAAG,KAAAH,EAAAoN,IAAAmB,WAAA,SAAA5V,GAAA,MAAAA,GAAA+V,QACA,SAAAe,iBAAAlB,WAAAjO,OAAA,GAAA,GAAAoP,aAAApP,SAMAmE,OAAAkL,iBAAA,WACA/B,sBAAApN,mBACAiE,OAAA7E,YACA1C,WAAAM,WAAA,6BACAiH,OAAA8J,eAGA9J,OAAAhE,cAAA,SAAA8I,SACAqE,sBAAAnN,cAAA8I,QAAAxP,IACA0K,OAAA7E,SAAAI,EAAAU,QAAA+D,OAAA7E,SAAA2J,SACArM,WAAAM,WAAA,6BACAiH,OAAAqK,wBA1EA,WACArK,OAAAmL,QAAA,CACA,IAAAC,aAAAjC,sBAAAxN,gBACA,IAAAJ,EAAA+O,QAAAc,aAEA,YADApL,OAAAmL,QAAA,EAGAnI,gBAAA5G,YAAAgP,aAAA9I,KAAA,SAAAC,UACA,IAAA,GAAAhH,EAAAnI,QAAAgY,YAAA,KACApL,OAAA7E,SAAAoH,SAAA1J,KACA0C,EAAAkH,KAAAzC,OAAA7E,SAAA,SAAA2J,SACA+E,eAAA/E,eAGA,CACA,GAAAA,SAAAvC,SAAA1J,KAAA,EACAgR,gBAAA/E,SACA9E,OAAA7E,SAAA5D,KAAAuN,SAEA9E,OAAAqK,uBACArK,OAAAmL,QAAA,UAiEA9Q,WAAA,sCAAA,SAAA,UAAA,aAAA,oBACA,SAAA2F,OAAAE,QAAA9F,WAAA+K,mBACAnF,OAAA5F,WAAAA,WAEA4F,OAAAqF,MAAA,WACAF,kBAAAE,SAGArF,OAAAsF,SAAA,SAAAlM,KACA8G,QAAAe,SAAA7H,OCrGA,IAAAhB,eAAAC,QAAAC,OAAA,gBACAF,eAAAiC,WAAA,uBAAA,SAAA,WAAA,UAAA,iBAAA,SAAA2F,OAAA8C,SAAA5C,QAAA8C,gBACA,GAAAO,MAEAvD,QAAAqL,MAAAnL,QAAAoL,YAEAtL,OAAAuL,eAAA,WACAvL,OAAAqL,QAGAvI,SAAAiB,OAAAR,OACAA,MAAAT,SAAA,WACA9C,OAAAwL,WAAA,EACAxL,OAAAyL,uBACAzL,OAAA0L,qBACA,IAAAC,iBACAjH,QAAA1E,OAAAqL,MACA1G,MAAA,EACAC,SAAA1E,QAAA0L,iBAEA5I,gBAAAzG,iBAAAoP,gBAAArJ,KAAA,SAAAC,UACA,GAAAsJ,YAAAtJ,SAAA1J,KAAAgT,UACAA,YAAAhQ,OAAA,GACA8P,eAAA/G,SAAA1E,QAAA0L,iBAAA,EACA5L,OAAAyL,oBAAAlQ,EAAAuQ,MAAAD,WAAA,KAEAF,eAAA/G,SAAA1E,QAAA0L,iBAAAC,WAAAhQ,OACAmE,OAAAyL,oBAAAI,YAEA7I,eAAA3G,OAAAsP,gBAAArJ,KAAA,SAAAC,UACA,GAAApH,UAAAoH,SAAA1J,KAAAsC,QACA6E,QAAA0L,mBAAAvQ,SACA6E,OAAAwL,WAAA,OAGA,SCnCA,IAAApT,eAAAC,QAAAC,OAAA,gBACAF,eAAAyQ,UAAA,aACAvO,YAAA,sDACAwO,UACAxH,QAAA,IACAoB,UAAA,IACAoD,UAAA,IACAiG,oBAAA;wBACA1O,kBAAA,IACA2O,SAAA,IACAC,SAAA,KAEAC,SACAC,aAAA,0BAEA9R,YAAA,SAAA,SAAA2F,QAgBA,QAAAoM,gCAAA9K,SACAA,UAEAA,QAAAmG,QAAAlM,EAAA8Q,UAAAC,KAAAxG,WAAA4B,MAAApG,QAAAhE,cACA,MAAAgE,QAAAmG,UACA6E,KAAAhL,QAAAK,YAAA2K,KAAAhL,QAAAmG,QAAAzC,KACAsH,KAAAhL,QAAAhE,YAAAgP,KAAAhL,QAAAmG,QAAAC,OAGApG,QAAAmG,UACAnG,QAAAmG,QAAA8E,QACAC,iBAAAlL,QAAAA,QAAAmG,QAAA8E,SAGAD,KAAAjP,mBAAAoK,QAAAnG,QAAAmG,UAAAnF,KAAA,SAAAiK,SACAjL,QAAAmG,QAAA8E,QAAAA,QACAC,iBAAAlL,QAAAiL,aAOA,QAAAC,kBAAAlL,QAAAiL,SACAjL,QAAAmL,OAAAlR,EAAA8Q,UAAAE,SAAAvE,KAAA1G,QAAAsG,WACAtG,QAAAmL,QACAH,KAAAhL,QAAAsG,SAAA0E,KAAAhL,QAAAmL,OAAAzE,KACAsE,KAAAhL,QAAAM,WAAA0K,KAAAhL,QAAAmL,OAAAzH,OAGAsH,KAAAhL,QAAAsG,aAAA8E,GACAJ,KAAAhL,QAAAM,eAAA8K,IAcA,QAAArL,kBAAAC,SACA,GAAAC,oBAAAD,QAAAE,UAAA,IAAAF,QAAAG,SAAA,IAQA,OAPAF,qBAAAD,QAAAI,aAAAJ,QAAAI,aAAA,KAAA,GACAH,oBAAAD,QAAAK,YAAA,KACAJ,oBAAAD,QAAAM,WAAAN,QAAAM,WAAA,KAAA,GACAL,oBAAAD,QAAAO,KAAA,IACAN,oBAAAD,QAAAQ,MAAA,KACAP,oBAAAD,QAAAS,MAAAT,QAAAS,MAAA,GACAR,oBAAAD,QAAAU,WApEA,GAAAsK,MAAAnW,IACAA,MAAAmT,QAAA,WACAgD,KAAAP,qBACAO,KAAAP,oBAAAY,aAAAxW,MACAmW,KAAAH,cACAG,KAAAH,aAAAQ,aAAAxW,OAGAA,KAAAyW,WAAA,WACAN,KAAAP,qBACAO,KAAAP,oBAAAc,gBAAA1W,MACAmW,KAAAH,cACAG,KAAAH,aAAAU,gBAAA1W,OAsCAmW,KAAAQ,QAAA,SAAAC,KAAAT,KAAA7I,KAAAsJ,KAEAT,KAAAU,SAAA,WACA,OAAAV,KAAA7I,OACA6I,KAAA7I,KAAAW,gBACAkI,KAAA7I,KAAAwJ,SAiBAjN,OAAAM,OAAA,gBAAA,WACAgM,KAAAhL,UACA8K,+BAAAE,KAAAhL,SACAgL,KAAAhL,QAAA0D,KAAA3D,iBAAAiL,KAAAhL,UAEAgL,KAAAL,UAAA3K,QAAAgL,KAAAhL,YACA,MC9FA,IAAAlJ,eAAAC,QAAAC,OAAA,gBAEAF,eAAAyQ,UAAA,gBACAvO,YAAA,yDACA4R,SACAC,aAAA,0BAEArD,UACAoE,KAAA,IACAnB,oBAAA,KAEA1R,YAAA,SAAA,UAAA,SAAA2F,OAAAmN,SACA,GAAAb,MAAAnW,IAEAA,MAAAmT,QAAA,WACAgD,KAAAP,qBACAO,KAAAP,oBAAAY,aAAAxW,MACAmW,KAAAH,cACAG,KAAAH,aAAAQ,aAAAxW,OAGAA,KAAAyW,WAAA,WACAN,KAAAP,qBACAO,KAAAP,oBAAAc,gBAAA1W,MACAmW,KAAAH,cACAG,KAAAH,aAAAU,gBAAA1W,OAGA6J,OAAAM,OAAA,gCAAA,SAAA8M,KACAd,KAAAY,OACAZ,KAAAY,KAAAG,mBAAAF,QAAA,aAAAC,QAEA,GAEAd,KAAAU,SAAA,WAEA,MADAV,MAAA7I,KAAAW,iBACAkI,KAAA7I,KAAAI,cCpCAxL,QAAAC,OAAA,iBAEAuQ,UAAA,kBACAvO,YAAA,4DACAwO,UACAmB,MAAA,IACAxG,KAAA,IACAuB,KAAA,IACAsI,YAAA,IACAtU,KAAA,KACAuU,SAAA,IACAC,cAAA,KACAC,UAAA,KAEApT,YAAA,WACA,GAAA+O,OAAAjT,IAEAiT,OAAA4D,SAAA,WAEA,MADA5D,OAAA3F,KAAAW,gBACAgF,MAAA3F,KAAAwJ,WCnBA,IAAA7U,eAAAC,QAAAC,OAAA,gBAEAF,eAAAyQ,UAAA,eACAvO,YAAA,0DACAwO,UACAzF,MAAA,MCLA,IAAAjL,eAAAC,QAAAC,OAAA,gBAEAF,eAAAyQ,UAAA,oBACAvO,YAAA,6DACA4R,SACAC,aAAA,0BAEArD,UACA4E,uBAAA,IACAC,eAAA,IACAC,cAAA,IACA7B,oBAAA,KAEA1R,YAAA,SAAA,SAAA2F,QACA,GAAAsM,MAAAnW,IAEAA,MAAAmT,QAAA,WACAgD,KAAAoB,yBAAApL,KAAA,SAAAuL,SACAvB,KAAAwB,oBAAAvS,EAAAwS,OAAAF,QAAA,SAAAhY,GAAA,MAAAA,GAAAmY,WACA1B,KAAAsB,gBACAtB,KAAAsB,cAAArS,EAAA8Q,UAAAC,KAAAwB,qBAAA9F,KAAAsE,KAAAsB,cAAA5F,SAEAsE,KAAAsB,eAAAtB,KAAAwB,oBAAAjS,OAAA,GACAyQ,KAAA2B,aAAA3B,KAAAwB,oBAAA,MAGAxB,KAAAP,qBACAO,KAAAP,oBAAAY,aAAAxW,MACAmW,KAAAH,cACAG,KAAAH,aAAAQ,aAAAxW,OAGAA,KAAAyW,WAAA,WACAN,KAAAP,qBACAO,KAAAP,oBAAAc,gBAAA1W,MACAmW,KAAAH,cACAG,KAAAH,aAAAU,gBAAA1W,OAGAmW,KAAAU,SAAA,WACA,MAAAV,MAAAsB,eAGAtB,KAAA2B,aAAA,SAAA9U,QACAmT,KAAAsB,cAAAzU,OACAmT,KAAAqB,gBAAAC,cAAAzU,aC7CA,IAAAf,eAAAC,QAAAC,OAAA,gBAEAF,eAAAyQ,UAAA,YACAvO,YAAA,uDACAwO,UACAoF,MAAA,MCJA,IAAAC,YAAA,yBAEAzB,KAAAvU,2BACAA,0BAAAZ,KAAA4W,YAEA9V,QAAAC,OAAA6V,YAAA,aAAA,oBAAA,eAAA,yBAAA,aAAA,kBAEAjV,QAAA,qBAAA,SAAAS,oBACAA,mBAAAE,yBAAA,sBACAF,mBAAAG,aAAAC,SAAA,4BACAJ,mBAAAK,kBAAA,SAGAoU,KAAA,iBAAA,SAAAC,gBAEAA,eAAAvR,IAAA,qBAAA,2YAGAmN,MAAA,uBAAA,oBAEApB,UAAA,oBACAvO,YAAA,sBACAwO,UACAzI,QAAA,IACAwC,SAAA,KAEAyL,eACAlN,KAAA,cAAA4D,KAAA,SAAA6D,UAAA,oBACAzH,KAAA,qBAAA4D,KAAA,gBAAA6D,UAAA,2BACAzH,KAAA,UAAA4D,KAAA,SAAA6D,UAAA,oBACAzH,KAAA,WAAA4D,KAAA,UAAA6D,UAAA,yBAAA0F,cAAA,IACAnN,KAAA,aAAA4D,KAAA,YAAA6D,UAAA,uBACAzH,KAAA,kBAAA4D,KAAA,iBAAA6D,UAAA,4BACAzH,KAAA,YAAA4D,KAAA,WAAA6D,UAAA,mBAEAxO,YAAA,wBAAA,4BAAA,0BAAA,SAAAmU,WAAApO,YAAAqO,QACA,GAAArF,OAAAjT,IACAiT,OAAAqF,OAAAA,OAEArF,MAAAsF,UAAA,SAAAC,WAAA/J,SAAAgK,UAAAC,UACAJ,OAAAK,YAAA,WACA,MAAAN,YAAAE,WAAAC,WAAAA,WAAA/J,SAAAA,SAAAgK,UAAAA,WAAAC,UAAAE,YAIA3F,MAAA4F,cAAA,SAAAC,eACAR,OAAAK,YAAA,WACA,MAAAN,YAAAU,cAAAD,cAAA7O,YAAAiC,aAAA0M,YAIA3F,MAAA+F,gBAAA,SAAAtW,MACA,MAAA4V,QAAAK,YAAA,WACA,MAAAN,YAAAW,gBAAAtW,KAAAuH,YAAAiC,aAAA0M,YAIA3F,MAAAgG,eAAAZ,WAAApR,eAEAgM,MAAA/L,kBAAA,SAAAoK,SACA,MAAA+G,YAAAnR,kBAAAoK,SAAAsH,UAGA3F,MAAAiG,eAAA,SAAAC,oBACA,MAAAb,QAAAK,YAAA,WACA,MAAAN,YAAAa,eAAAC,oBAAAP,gBAMA9U,QAAA,kBAAA,KAAA,SAAAzB,IACArC,KAAAoZ,QAAA,SAAAzW,SACA,MAAAN,IAAAgX,KAAA9c,OAAA6c,QAAAzW,SAAA,kBAIAP,QAAA,0BAAA,WACA,GAAAkX,SACAC,WAAA,EACAZ,YAAA,SAAAa,MAEA,MADAF,QAAAC,WAAA,EACAC,OAAArN,KAAA,SAAAsN,QAEA,MADAH,QAAAC,WAAA,EACAE,QAEA,WAAAH,OAAAC,WAAA,KAIA,OAAAD,UC3FApX,QAAAC,OAAA,sBACAuQ,UAAA,sBACAvO,YAAA,wDACA4R,SACA2D,eAAA,qBAEAxV,YAAA,4BAAA,iBAAA,aAAA,SAAA,0BAAA,SAAA+F,YAAA0P,eAAAC,WAAA/P,OAAAyO,QACA,GAAArF,OAAAjT,IACAiT,OAAAqF,OAAAA,OAEAzO,OAAAM,OACA,WAAA,MAAAF,aAAAyC,SAAAH,WACA,WACA0G,MAAA1G,UAAAtC,YAAAyC,SAAAH,YAIA0G,MAAA4G,cAAA,WACAzU,EAAA0U,KAAAC,YAAAlD,aACA5D,MAAA1G,UAAAnL,KAAA6R,MAAA+G,YACA/G,MAAA+G,WAAA,KACA/G,MAAAyG,eAAAV,gBAAA/F,MAAA1G,aAIA0G,MAAAgH,OAAA,WACAF,WAAA9G,MAAAiH,SAAArD,aACA3U,QAAA4L,KAAAmF,MAAAkH,SAAAlH,MAAA1G,UAAA0G,MAAAiH,UACAjH,MAAAyG,eAAAV,gBAAA/F,MAAA1G,WAAAJ,KAAA8G,MAAArF,UAIAqF,MAAArF,OAAA,WACAqF,MAAAiH,SAAA,EACAjH,MAAAkH,SAAA,MAGAlH,MAAAmH,KAAA,SAAAC,QACApH,MAAAiH,QAAAG,OACApH,MAAAkH,SAAAjY,QAAA4L,KAAAmF,MAAA1G,UAAA0G,MAAAiH,WAGAjH,MAAApM,OAAA,SAAAwT,QACA,GAAArW,YAAA,SAAAsW,MACAX,eAAAP,QAAAkB,MAAAnO,KAAA,SAAAoO,WACAA,YACAtH,MAAA1G,UAAAiO,OAAAH,OAAA,GACApH,MAAAyG,eAAAV,gBAAA/F,MAAA1G,cAKAqN,YAAA,qCAAAzN,KAAAnI,WAAAA,YAGA,IAAA+V,cACA9G,OAAAuD,aAAA,SAAA9D,WACAqH,WAAA3Y,KAAAsR,YAEAO,MAAAyD,gBAAA,SAAAhE,WACAqH,WAAA3U,EAAAU,QAAAiU,WAAArH,gBC5DAxQ,QAAAC,OAAA,sBACAuQ,UAAA,kBACAvO,YAAA,oDACAgU,eACAlN,KAAA,IAAA4D,KAAA,WAAA6D,UAAA,iBAAA0F,cAAA,IAEAlU,YAAA,cAAA,aAAA,cAAA,aAAA,0BAAA,WAAA,SAAAuW,YAAAnY,WAAAsK,YAAAgN,WAAAtB,OAAA3L,UACA,GAAAsG,OAAAjT,IACAiT,OAAAqF,OAAAA,OACArF,MAAAyH,gBAEAzH,MAAA0H,WAAA,SAAAC,OACAA,OAAAA,MAAAlV,OAAA,IACAuN,MAAA2H,MAAAA,MACA3H,MAAA4H,WAAAD,MAAA,IACA1Y,QAAA4Y,QAAA7H,MAAA2H,MAAA,SAAAG,MACA,GAAAC,UAAA,oBAAAD,KAAAlM,KAAA,cACAoM,eAAA,oBAAAF,KAAAlM,KAAA,mBACA+K,aAAAoB,SAAAC,iBAAA9O,KAAA,SAAA+O,cACAH,KAAAjY,MAAAoY,aAAAF,UACAD,KAAAI,YAAAD,aAAAD,iBACA,SAAAG,gBACAL,KAAAjY,MAAAsY,eAAAJ,UACAD,KAAAI,YAAAC,eAAAH,sBAOAhI,MAAA4H,WAAA,SAAAE,MACA9H,MAAAyH,aAAAK,KACAzC,OAAAK,YAAA,WACA,MAAA8B,aAAAnS,YAAAyS,KAAAlM,MAAA1C,KAAA,SAAAC,UACA6G,MAAAyH,aAAAxN,MAAAd,SAAA1J,KAAAwK,WAKA+F,MAAArM,eAAA,SAAA4G,SAAAuN,MACAzC,OAAAK,YAAA,WACA,MAAA8B,aAAA7T,eAAA4G,SAAArO,GAAA4b,KAAAlM,MAAA1C,KAAA,SAAAC,UACA6G,MAAA4H,WAAAE,WAKA9H,MAAAoI,UAAA,SAAA7N,UACA8K,OAAAK,YAAA,WACA,MAAA/L,aAAArG,YAAAiH,SAAArI,UAAA,GAAAgH,KAAA,SAAAC,UACA6G,MAAAqI,cAAA,EACA3O,SAAA,WACAsG,MAAAqI,cAAA,GACA,cCrDApZ,QAAAC,OAAA,sBACAuQ,UAAA,mBACAvO,YAAA,qDACAgU,eACAlN,KAAA,IAAA4D,KAAA,YAAA6D,UAAA,sBAAA0F,cAAA,IACAnN,KAAA,WAAA4D,KAAA,cAAA6D,UAAA,yBAEAxO,YAAA,cAAA,SAAAqX,aACAvb,KACAub,YAAAA,gBAIA7I,UAAA,uBACAvO,YAAA,0BACAD,YAAA,sBAAA,0BAAA,SAAAsX,SAAAlD,QACA,GAAAnC,MAAAnW,IACAmW,MAAAmC,OAAAA,OACAnC,KAAAsF,cAAAC,YAAA,EAAAC,kBAAA,EAAAC,SAAA,IACAzF,KAAAsF,aAAAI,YAAA,WACAvD,OAAAK,YAAA,WACA,MAAA6C,UAAAtV,QACAsS,WAAArC,KAAAsF,aAAAC,YACAjN,SAAA0H,KAAAsF,aAAAE,kBACAlD,UAAAtC,KAAAsC,WACA,SAAA/V,MACAyT,KAAA2F,QAAApZ,KAAAqZ,QACA5F,KAAAsF,aAAAO,WAAAtZ,KAAAuZ,aACArD,YAIA5Y,KAAAkc,kBAAA,SAAAC,MACAhG,KAAAsF,aAAAC,YAAAS,KAAAC,OAAA5D,YAAArC,KAAAsF,aAAAC,YACAvF,KAAAsF,aAAAI,mBAKAnJ,UAAA,wBACAvO,YAAA,2BACA4R,SACA2D,eAAA,qBAEAxV,YAAA,sBAAA,aAAA,UAAA,0BAAA,iBAAA,cAAA,SAAAsX,SAAAlZ,WAAAyH,QAAAuO,OAAAqB,eAAA4B,aAKA,QAAAc,WACA/D,OAAAK,YAAA,WAiBA,MAhBA1F,OAAA8E,MAAAyD,SAAA9W,KAAAmE,OAAAoK,MAAArJ,aAAA,SAAA6P,QACAxG,MAAAqJ,eAAA,CACA,IAAAC,aAAAnX,EAAA0U,KAAA1U,EAAAwS,OAAA3E,MAAA8E,MAAAyE,WAAA,eACAvJ,OAAA5D,eAAAkN,aAAAA,YAAAlN,gBACAjK,EAAA8Q,UAAAjD,MAAA8E,MAAAxL,WAAA1J,KAAA,aACAuC,EAAAuQ,MAAA1C,MAAA8E,MAAAxL,WACA0G,MAAAwJ,YAAAlB,YAAAmB,cAAAzJ,MAAA8E,OAAA4E,IAAArM,OAEA2C,MAAAwJ,YAAA,IACAxJ,MAAA2J,8BAAA,EACAC,YAAArB,SAAAsB,mBAAAjU,OAAAoK,MAAArJ,aAAA,SAAA6P,QAEAsD,iBAAAtD,OAAAuD,eAAAvD,OAAA/R,WACAkR,YAGA3F,MAAA8E,MAAAa,WA2GA,QAAAmE,kBAAAC,eAAAC,oBACAhK,MAAAvL,QAAA6T,YAAAmB,cAAAzJ,MAAA8E,MAAAiF,eAAAC,oBACAhK,MAAAvL,QAAAwV,QAAAjK,MAAAvL,QAAAwV,SAAA,mBACAjK,MAAAwJ,YAAAxJ,MAAAvL,QAAAiV,IAAArM,OAEA2C,MAAAkK,iBAAAlK,MAAAvL,QAAAvI,KAAA8d,mBAAA9d,GACA8T,MAAAkK,kBACAlK,MAAAmK,oBAAAhY,EAAA8Q,UAAA8G,gBAAAnL,KAAAoB,MAAAvL,QAAA2V,eAGAjY,EAAAC,KAAA4N,MAAA8E,MAAAuF,aACArK,MAAAsK,qBAAA,EACAtK,MAAA2J,8BAAA,GAIA,QAAAhS,eAAAC,QACAd,QAAAe,SAAAC,KAAAF,OAlJA,GAAAoI,OAAAjT,IACAiT,OAAAqF,OAAAA,OACArF,MAAAsK,qBAAA,EAwBAvd,KAAAkc,kBAAA,SAAAC,MACAlJ,MAAAuF,WAAA2D,KAAAC,OAAA5D,YAAA,EACAvF,MAAArJ,YAAAuS,KAAAC,OAAAvT,OAEAwT,WAGApJ,MAAAuK,cAAA,WACA,GAAAva,KAAA8G,QAAAnG,SAAA,wBAAAqP,MAAArJ,YAAA,UACAG,SAAA3F,KAAAnB,IAAA,WAGAgQ,MAAAwK,YAAA,WACAZ,YAAA1Q,KAAA,SAAAsN,QACAxG,MAAAqJ,eAAA,IAIA,IAAAO,YACA5J,OAAAsE,uBAAA,WACA,MAAAsF,aAAA1Q,KAAA,SAAAsN,QACA,GAAAiE,yBAKA,OAJAzK,OAAAvL,QAAA2V,cACAK,yBAAAtY,EAAA8Q,UAAAuD,OAAAuD,gBAAAnL,KAAAoB,MAAAvL,QAAA2V,eAGAK,0BAAAA,0BAAAjE,OAAAuD,kBAIA/J,MAAAmK,oBAAA,SAAA3F,eACAvV,QAAAyb,OAAA1K,MAAAvL,QAAA+P,eACAxE,MAAAvL,QAAA2V,YAAA5F,cAAA5F,KAIAoB,MAAA4D,YAGA5D,MAAA4D,SAAA,WAQA,MAPA5D,OAAA2K,QAAA3K,MAAAvL,SACAuL,MAAAvL,QAAA2V,aACApK,MAAAvL,QAAAiV,KAAA1J,MAAAvL,QAAAiV,IAAArM,OAAA,GACAlL,EAAAyY,MAAA9D,WAAA,SAAAra,GACA,MAAA,kBAAAA,GAAAmX,UAAAnX,EAAAmX,aAGA5D,MAAA2K,SAGA3K,MAAAgH,OAAA,WACAhH,MAAA4D,YACAyB,OAAAK,YAAA,WAEA,MADA1F,OAAAvL,QAAAQ,aAAA+K,MAAAwE,cAAAV,KACAyE,SAAA/T,oBAAAoB,OAAAoK,MAAArJ,aAAAqJ,MAAAvL,QAAA,SAAAA,SACA8T,SAAAsC,gBAAAjV,OAAAoK,MAAArJ,YAAAmU,cAAArW,QAAAmB,QAAAoK,MAAAwE,cAAAV,KAAA,SAAA0C,QACA,GAAAuE,uBAAAvE,OAAAuE,sBACAvG,cAAAgC,OAAAhC,aAEA,KAAAuG,sBAAAC,UAMA,WALA3b,YAAAM,WAAA,mBACAC,KAAA,QACAC,OAAA,oCAAAkb,sBAAAE,MAAA,uBAAAF,sBAAAG,kBAAAtgB,KAAA,KACA8E,QAAAqb,sBAAAE,OAKAzG,eAAA2G,mBAAA,iBAAA3G,cAAA2G,kBAAA1f,eAAAsf,sBAAAK,SACAzT,cAAAqI,MAAAyG,eAAAxP,QAAA,yCAAA+I,MAAArJ,aACA6N,cAAA2G,mBAAA,gBAAA3G,cAAA2G,kBAAA1f,eAAAsf,sBAAAM,YACA1T,cAAAoT,sBAAAM,aAEArL,MAAAyG,eAAAhN,SAAAsF,iBACAqK,UAEAzR,cAAAqI,MAAAyG,eAAAxP,QAAA,eAAA+I,MAAArJ,iBAIAgP,YAKA3F,MAAArF,OAAA,WACA+L,eAAAP,QAAA,wBAAAjN,KAAA,SAAAoO,WACAA,WACAjC,OAAAK,YAAA,WACA,MAAA6C,UAAA+C,eAAA1V,OAAAoK,MAAArJ,YAAAmU,cAAA9K,MAAAvL,QAAAmB,QAAA,KAAAwT,SAAAzD,aAMA,IAAAmB,cACA9G,OAAAuD,aAAA,SAAA9D,WACAqH,WAAA3Y,KAAAsR,YAEAO,MAAAyD,gBAAA,SAAAhE,WACAqH,WAAA3U,EAAAU,QAAAiU,WAAArH,gBAyBAtQ,QAAA,cAAA,WA4BA,OA1BAsa,cAAA,SAAA3E,MAAAiF,eAAAC,oBACA,GAAA3D,QACAkF,aAAApZ,EAAAqZ,OAAA1G,MAAAyE,WAAA,SAAA9c,GACA,MAAA,SAAAA,EAAAwD,SAEAwb,WAAAtZ,EAAAuZ,OAAAH,aAAA,SAAAI,KAAAC,KAAA,MAAAD,MAAAC,IAAAlC,IAAArM,QAAA,GACAmM,YAAA1E,MAAA+G,MAAAxO,OAAAoO,WAEAK,gBAAA3Z,EAAAqZ,OAAA1G,MAAAyE,WAAA,SAAA9c,GACA,OAAAA,EAAAsf,cACA,QAAAtf,EAAAwD,QAAA,YAAAxD,EAAAwD,SACAxD,EAAAid,IAAArM,OAAA,IAEA2O,eAAA7Z,EAAA0U,KAAA1U,EAAAwS,OAAAmH,gBAAA,eASA,QARAE,gBAAAjC,iBAAA5X,EAAA8Q,UAAA8G,gBAAAnL,KAAAoN,eAAA5B,eAGAJ,mBAAAA,qBAAAN,QACAM,mBAAAN,IAAArM,OAAAmM,YACAnD,OAAA2D,oBAJA3D,OAAA2F,eAOA3F,WAOAmF,OAAA,gCAAA,cAAA,SAAAlD,aACA,MAAA,UAAAxD,OACA,GAAAuB,QAAAvB,MAAA7U,QAAA,MAEAgc,MAAA9Z,EAAA8Q,UAAAqF,YAAA4D,cAAAjc,OAAAoW,OAAA5a,eAKA,OAJAwgB,SACA5F,OAAA4F,MAAAE,OAGA9F,WC5OApX,QAAAC,OAAA,sBACAuQ,UAAA,2BACAvO,YAAA,8DACA4R,SACA2D,eAAA,qBAEAxV,YAAA,0BAAA,SAAAoU,QACA,GAAAnC,MAAAnW,IACAmW,MAAAmC,OAAAA,OACAnC,KAAAkJ,sBAEAlJ,KAAA8D,OAAA,WAEA9D,KAAAmJ,OAAA,KACAnJ,KAAA+H,QACA,IACAqB,UADAC,UAAA,CAGAD,UAAApJ,KAAAkJ,mBAAAI,cAAAtJ,KAAAkJ,mBAAAK,YACAvJ,KAAA+H,MAAAwB,YAAAH,SACAC,SAAAA,UAAAD,SAEAC,WACAD,SAAApJ,KAAAkJ,mBAAAK,cAAAvJ,KAAAkJ,mBAAAM,aACAxJ,KAAA+H,MAAAyB,aAAAJ,SACAC,SAAAA,UAAAD,UAGAC,UACArJ,KAAAuD,eAAAR,eAAA/C,KAAAkJ,oBAAAlT,KAAA,SAAAsN,QACAvX,QAAAyb,OAAAxH,KAAAsD,QACAtD,KAAAkJ,sBACAlJ,KAAA7I,KAAAsS,kBAKAzJ,KAAAQ,QAAA,SAAAC,KAAAT,KAAA7I,KAAAsJ,SCrCA1U,QAAAC,OAAA,sBACAuQ,UAAA,0BACAvO,YAAA,6DACAwO,UACAkN,QAAA,KAEA9J,SACA2D,eAAA,qBAEAxV,YAAA,4BAAA,SAAA,0BAAA,SAAA+F,YAAAJ,OAAAyO,QACA,GAAArF,OAAAjT,IACAiT,OAAAqF,OAAAA,OAEAzO,OAAAM,OACA,WAAA,MAAAF,aAAAyC,UACA,SAAAA,UACAuG,MAAAvG,SAAAA,SACAA,WACAA,SAAAoT,YACA7M,MAAA4M,QAAAE,UAAA,WAEA9M,MAAA+M,YAEA3U,UAAAqB,SAAArB,UACAC,SAAAoB,SAAApB,SACAyG,MAAArF,SAAAqF,UAKAkB,MAAAgH,OAAA,WAEAhH,MAAAyG,eAAAb,cAAA5F,MAAA+M,iBChCA9d,QAAAC,OAAA,sBACAuQ,UAAA,mBACAvO,YAAA,qDACA4R,SACA2D,eAAA,qBAEAxV,YAAA,WACA,GAAAiS,MAAAnW,IACAmW,MAAAsF,cAAAC,YAAA,EAAAC,kBAAA,EAAAC,SAAA,IACAzF,KAAAsF,aAAAI,YAAA,WACA1F,KAAAuD,eAAAnB,UAAApC,KAAAsF,aAAAC,YAAAvF,KAAAsF,aAAAE,kBAAAxF,KAAAsC,UAAA,SAAA/V,MACAyT,KAAA2F,QAAApZ,KAAAqZ,QACA5F,KAAAsF,aAAAO,WAAAtZ,KAAAuZ,cAIAjc,KAAAkc,kBAAA,SAAAC,MACAhG,KAAAsF,aAAAC,YAAAS,KAAAC,OAAA5D,YAAArC,KAAAsF,aAAAC,YACAvF,KAAAsF,aAAAI,mBClBA3Z,QAAAC,OAAA,sBACAuQ,UAAA,0BACAvO,YAAA,4DACAgU,eACAlN,KAAA,IAAA4D,KAAA,mBAAA6D,UAAA,6BAAA0F,cAAA,IACAnN,KAAA,WAAA4D,KAAA,qBAAA6D,UAAA,kCAIAA,UAAA,8BACAvO,YAAA,iCACAD,YAAA,6BAAA,iBAAA,0BAAA,aAAA,SAAA+b,gBAAAtG,eAAArB,OAAAsB,YACA,GAAA3G,OAAAjT,IACAiT,OAAAqF,OAAAA,OACArF,MAAAwI,cAAAC,YAAA,EAAAC,kBAAA,EAAAC,SAAA,IACA3I,MAAAwI,aAAAI,YAAA,WACAvD,OAAAK,YAAA,WACA,MAAAsH,iBAAA/Z,QACAsS,WAAAvF,MAAAwI,aAAAC,YACAjN,SAAAwE,MAAAwI,aAAAE,kBACAlD,UAAAxF,MAAAwF,WACA,SAAA/V,MACAuQ,MAAA6I,QAAApZ,KAAAqZ,QACA9I,MAAAwI,aAAAO,WAAAtZ,KAAAuZ,aACArD,YAIA5Y,KAAAkc,kBAAA,SAAAC,MACAlJ,MAAAwI,aAAAC,YAAAS,KAAAC,OAAA5D,YAAAvF,MAAAwI,aAAAC,YACAzI,MAAAwI,aAAAI,mBAKAnJ,UAAA,+BACAvO,YAAA,kCACAD,YAAA,6BAAA,iBAAA,0BAAA,aAAA,SAAA+b,gBAAAtG,eAAArB,OAAAsB,YAIA,QAAAyC,WACA/D,OAAAK,YAAA,WACA,MAAAsH,iBAAAvb,KAAAmE,OAAAoK,MAAAiN,aAAA,SAAAzG,QACAxG,MAAAkN,aAAAje,QAAA4L,KAAA2L,UACAb,WAPA,GAAA3F,OAAAjT,IACAiT,OAAAqF,OAAAA,OAUAtY,KAAAkc,kBAAA,SAAAC,MACAlJ,MAAAuF,WAAA2D,KAAAC,OAAA5D,YAAA,EACAvF,MAAAiN,YAAA/D,KAAAC,OAAAvT,OAEAwT,WAGApJ,MAAArF,OAAA,WAIA0K,OAAAK,YAAA,WACA,MAAAsH,iBAAArS,QAAA/E,OAAAoK,MAAAiN,cAAArX,OAAAoK,MAAAiN,YAAAE,aAAAnN,MAAAmN,cAAA,SAAA3G,QACAxG,MAAAkN,aAAAje,QAAA4L,KAAA2L,QACAxG,MAAAoN,qBAAA,IACAzH,gBAUA6F,OAAA,gBAAA,WACA,MAAA,UAAA/b,KAAA4d,oBAeA,MAdA,oCAAA5d,KAAA6d,SAAA7hB,cAAA,KAAA,IAAA4hB,mBAAA,EAAA,aC5EApe,QAAAC,OAAA,sBACAC,QAAA,yBAAA,YAAA,SAAAoe,WACA,MAAAA,WAAA,wBAAA,MACAzH,eAAA9V,IAAA,wBAAAD,OAAA,QACAkW,gBAAAjW,IAAA,iCAAAD,OAAA,QACAuV,WAAAtV,IAAA,gCACA+V,iBAAA/V,IAAA,kCAAAD,OAAA,QACAiE,cAAAhE,IAAA,0BAAAwd,SAAA,GACAvZ,mBAAAjE,IAAA,yCAAAwd,SAAA,QAGAre,QAAA,uBAAA,YAAA,SAAAoe,WACA,MAAAA,WAAA,+BAAA,MACAta,QAAAjD,IAAA,8BAAAD,OAAA,QACA8Z,mBAAA7Z,IAAA,+CACAwE,oBAAAxE,IAAA,wCAAAD,OAAA,QACA8a,gBAAA7a,IAAA,+DAAAD,OAAA,QACAub,eAAAtb,IAAA,8DAAAD,OAAA,aAGAZ,QAAA,8BAAA,YAAA,SAAAoe,WACA,MAAAA,WAAA,sCAAA,MACAta,QAAAjD,IAAA,qCAAAD,OAAA,QACA4K,QAAA3K,IAAA,6CAAAD,OAAA","file":"account-scripts.js","sourcesContent":["/* Modernizr 2.8.2 (Custom Build) | MIT & BSD\r\n * Build: http://modernizr.com/download/#-fontface-csstransforms-csstransforms3d-touch-cssclasses-teststyles-testprop-testallprops-prefixes-domprefixes-cssclassprefix:supports!\r\n */\r\n;window.Modernizr=function(a,b,c){function z(a){j.cssText=a}function A(a,b){return z(m.join(a+\";\")+(b||\"\"))}function B(a,b){return typeof a===b}function C(a,b){return!!~(\"\"+a).indexOf(b)}function D(a,b){for(var d in a){var e=a[d];if(!C(e,\"-\")&&j[e]!==c)return b==\"pfx\"?e:!0}return!1}function E(a,b,d){for(var e in a){var f=b[a[e]];if(f!==c)return d===!1?a[e]:B(f,\"function\")?f.bind(d||b):f}return!1}function F(a,b,c){var d=a.charAt(0).toUpperCase()+a.slice(1),e=(a+\" \"+o.join(d+\" \")+d).split(\" \");return B(b,\"string\")||B(b,\"undefined\")?D(e,b):(e=(a+\" \"+p.join(d+\" \")+d).split(\" \"),E(e,b,c))}var d=\"2.8.2\",e={},f=!0,g=b.documentElement,h=\"modernizr\",i=b.createElement(h),j=i.style,k,l={}.toString,m=\" -webkit- -moz- -o- -ms- \".split(\" \"),n=\"Webkit Moz O ms\",o=n.split(\" \"),p=n.toLowerCase().split(\" \"),q={},r={},s={},t=[],u=t.slice,v,w=function(a,c,d,e){var f,i,j,k,l=b.createElement(\"div\"),m=b.body,n=m||b.createElement(\"body\");if(parseInt(d,10))while(d--)j=b.createElement(\"div\"),j.id=e?e[d]:h+(d+1),l.appendChild(j);return f=[\"&#173;\",'<style id=\"s',h,'\">',a,\"</style>\"].join(\"\"),l.id=h,(m?l:n).innerHTML+=f,n.appendChild(l),m||(n.style.background=\"\",n.style.overflow=\"hidden\",k=g.style.overflow,g.style.overflow=\"hidden\",g.appendChild(n)),i=c(l,a),m?l.parentNode.removeChild(l):(n.parentNode.removeChild(n),g.style.overflow=k),!!i},x={}.hasOwnProperty,y;!B(x,\"undefined\")&&!B(x.call,\"undefined\")?y=function(a,b){return x.call(a,b)}:y=function(a,b){return b in a&&B(a.constructor.prototype[b],\"undefined\")},Function.prototype.bind||(Function.prototype.bind=function(b){var c=this;if(typeof c!=\"function\")throw new TypeError;var d=u.call(arguments,1),e=function(){if(this instanceof e){var a=function(){};a.prototype=c.prototype;var f=new a,g=c.apply(f,d.concat(u.call(arguments)));return Object(g)===g?g:f}return c.apply(b,d.concat(u.call(arguments)))};return e}),q.touch=function(){var c;return\"ontouchstart\"in a||a.DocumentTouch&&b instanceof DocumentTouch?c=!0:w([\"@media (\",m.join(\"touch-enabled),(\"),h,\")\",\"{#modernizr{top:9px;position:absolute}}\"].join(\"\"),function(a){c=a.offsetTop===9}),c},q.csstransforms=function(){return!!F(\"transform\")},q.csstransforms3d=function(){var a=!!F(\"perspective\");return a&&\"webkitPerspective\"in g.style&&w(\"@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}\",function(b,c){a=b.offsetLeft===9&&b.offsetHeight===3}),a},q.fontface=function(){var a;return w('@font-face {font-family:\"font\";src:url(\"https://\")}',function(c,d){var e=b.getElementById(\"smodernizr\"),f=e.sheet||e.styleSheet,g=f?f.cssRules&&f.cssRules[0]?f.cssRules[0].cssText:f.cssText||\"\":\"\";a=/src/i.test(g)&&g.indexOf(d.split(\" \")[0])===0}),a};for(var G in q)y(q,G)&&(v=G.toLowerCase(),e[v]=q[G](),t.push((e[v]?\"\":\"no-\")+v));return e.addTest=function(a,b){if(typeof a==\"object\")for(var d in a)y(a,d)&&e.addTest(d,a[d]);else{a=a.toLowerCase();if(e[a]!==c)return e;b=typeof b==\"function\"?b():b,typeof f!=\"undefined\"&&f&&(g.className+=\" supports-\"+(b?\"\":\"no-\")+a),e[a]=b}return e},z(\"\"),i=k=null,e._version=d,e._prefixes=m,e._domPrefixes=p,e._cssomPrefixes=o,e.testProp=function(a){return D([a])},e.testAllProps=F,e.testStyles=w,g.className=g.className.replace(/(^|\\s)no-js(\\s|$)/,\"$1$2\")+(f?\" supports-js supports-\"+t.join(\" supports-\"):\"\"),e}(this,this.document);","var storefrontAppDependencies = [\r\n    'ui.bootstrap',\r\n    'ngStorage',\r\n    'pascalprecht.translate',\r\n    'ngSanitize',\r\n]\r\nvar storefrontApp = angular.module('storefrontApp', storefrontAppDependencies);\r\n\r\nstorefrontApp.factory('httpErrorInterceptor', ['$q', '$rootScope', function ($q, $rootScope) {\r\n    var httpErrorInterceptor = {};\r\n\r\n    httpErrorInterceptor.responseError = function (rejection) {\r\n        if (rejection.data && rejection.data.message) {\r\n            $rootScope.$broadcast('storefrontError', {\r\n                type: 'error',\r\n                title: [rejection.config.method, rejection.config.url, rejection.status, rejection.statusText, rejection.data.message].join(' '),\r\n                message: rejection.data.stackTrace,\r\n            });\r\n        }\r\n        return $q.reject(rejection);\r\n    };\r\n    httpErrorInterceptor.requestError = function (rejection) {\r\n        if (rejection.data && rejection.data.message) {\r\n            $rootScope.$broadcast('storefrontError', {\r\n                type: 'error',\r\n                title: [rejection.config.method, rejection.config.url, rejection.status, rejection.statusText, rejection.data.message].join(' '),\r\n                message: rejection.data.stackTrace,\r\n            });\r\n        }\r\n        return $q.reject(rejection);\r\n    };\r\n\r\n    return httpErrorInterceptor;\r\n}])\r\n\r\nstorefrontApp.config(['$httpProvider', '$translateProvider', function ($httpProvider, $translateProvider) {\r\n    $httpProvider.interceptors.push('httpErrorInterceptor');\r\n\r\n    $translateProvider.useSanitizeValueStrategy('sanitizeParameters');\r\n    $translateProvider.useUrlLoader(BASE_URL + 'themes/localization.json');\r\n    $translateProvider.preferredLanguage('en');\r\n\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.service('dialogService', ['$uibModal', function ($uibModal) {\r\n    return {\r\n        showDialog: function (dialogData, controller, templateUrl) {\r\n            var modalInstance = $uibModal.open({\r\n                controller: controller,\r\n                templateUrl: templateUrl,\r\n                resolve: {\r\n                    dialogData: function () {\r\n                        return dialogData;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('feedbackService', ['$http', function ($http) {\r\n    return {\r\n        postFeedback: function (data) {\r\n            return $http.post('storefrontapi/feedback', data);\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('customerService', ['$http', function ($http) {\r\n    return {\r\n        getCurrentCustomer: function () {\r\n            return $http.get('storefrontapi/account?t=' + new Date().getTime());\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('marketingService', ['$http', function ($http) {\r\n    return {\r\n        getDynamicContent: function (placeName) {\r\n            return $http.get('storefrontapi/marketing/dynamiccontent/' + placeName + '?t=' + new Date().getTime());\r\n        },\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('pricingService', ['$http', function ($http) {\r\n\treturn {\r\n\t\tgetActualProductPrices: function (products) {\r\n\t\t    return $http.post('storefrontapi/pricing/actualprices', products);\r\n\t\t}\r\n\t}\r\n}]);\r\n\r\nstorefrontApp.service('compareProductService', ['$http', '$localStorage', function($http, $localStorage) {\r\n    return {\r\n        isInProductCompareList: function(productId) {\r\n            var containProduct;\r\n            if (!_.some($localStorage['productCompareListIds'], function(id) { return id === productId })) {\r\n                containProduct = false;\r\n            }\r\n            else\r\n                containProduct = true\r\n            return containProduct;\r\n        },\r\n        addProduct: function(productId) {\r\n            if (!$localStorage['productCompareListIds']) {\r\n                $localStorage['productCompareListIds'] = [];\r\n            }\r\n            $localStorage['productCompareListIds'].push(productId);\r\n            _.uniq($localStorage['productCompareListIds']);\r\n        },\r\n        getProductsIds: function() {\r\n            if (!$localStorage['productCompareListIds']) {\r\n                $localStorage['productCompareListIds'] = [];\r\n                return;\r\n            }\r\n            var ids = [];\r\n            for (i = 0; i < $localStorage['productCompareListIds'].length; i++) {\r\n                ids.push('productIds=' + $localStorage['productCompareListIds'][i]);\r\n            }\r\n            return ids.join(\"&\");\r\n        },\r\n        getProductsCount: function() {\r\n            var count = $localStorage['productCompareListIds'] ? $localStorage['productCompareListIds'].length : 0;\r\n            return count;\r\n        },\r\n        clearComapreList: function() {\r\n            $localStorage['productCompareListIds'] = [];\r\n        },\r\n        removeProduct: function(productId) {\r\n            $localStorage['productCompareListIds'] = _.without($localStorage['productCompareListIds'], productId);\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('catalogService', ['$http', function($http, $localStorage) {\r\n    return {\r\n        getProduct: function(productIds) {\r\n            return $http.get('storefrontapi/products?productIds=' + productIds + '&t=' + new Date().getTime());\r\n        },\r\n        getProducts: function(productIds) {\r\n            return $http.get('storefrontapi/products?' + productIds + '&t=' + new Date().getTime());\r\n        },\r\n        search: function (criteria) {\r\n            return $http.post('storefrontapi/catalog/search', criteria);\r\n        },\r\n        searchCategories: function (criteria) {\r\n            return $http.post('storefrontapi/categories/search', criteria);\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('cartService', ['$http', function ($http) {\r\n    return {\r\n        getCart: function () {\r\n            return $http.get('storefrontapi/cart?t=' + new Date().getTime());\r\n        },\r\n        getCartItemsCount: function () {\r\n            return $http.get('storefrontapi/cart/itemscount?t=' + new Date().getTime());\r\n        },\r\n        addLineItem: function (productId, quantity) {\r\n            return $http.post('storefrontapi/cart/items', { id: productId, quantity: quantity });\r\n        },\r\n        changeLineItemQuantity: function (lineItemId, quantity) {\r\n            return $http.put('storefrontapi/cart/items', { lineItemId: lineItemId, quantity: quantity });\r\n        },\r\n        removeLineItem: function (lineItemId) {\r\n            return $http.delete('storefrontapi/cart/items?lineItemId=' + lineItemId);\r\n        },\r\n        changeLineItemPrice: function (lineItemId, newPrice) {\r\n        \treturn $http.put('storefrontapi/cart/items/price', { lineItemId: lineItemId, newPrice: newPrice});\r\n        },\r\n        clearCart: function () {\r\n            return $http.post('storefrontapi/cart/clear');\r\n        },\r\n        getCountries: function () {\r\n            return $http.get('storefrontapi/countries?t=' + new Date().getTime());\r\n        },\r\n        getCountryRegions: function (countryCode) {\r\n        \treturn $http.get('storefrontapi/countries/' + countryCode + '/regions?t=' + new Date().getTime());\r\n        },\r\n        addCoupon: function (couponCode) {\r\n            return $http.post('storefrontapi/cart/coupons/' + couponCode);\r\n        },\r\n        removeCoupon: function () {\r\n            return $http.delete('storefrontapi/cart/coupons');\r\n        },\r\n        addOrUpdateShipment: function (shipment) {\r\n            return $http.post('storefrontapi/cart/shipments', shipment);\r\n        },\r\n        addOrUpdatePayment: function (payment) {\r\n            return $http.post('storefrontapi/cart/payments', payment );\r\n        },\r\n        getAvailableShippingMethods: function (shipmentId) {\r\n            return $http.get('storefrontapi/cart/shipments/' + shipmentId + '/shippingmethods?t=' + new Date().getTime());\r\n        },\r\n        getAvailablePaymentMethods: function () {\r\n            return $http.get('storefrontapi/cart/paymentmethods?t=' + new Date().getTime());\r\n        },\r\n        addOrUpdatePaymentPlan: function (plan) {\r\n            return $http.post('storefrontapi/cart/paymentPlan', plan);\r\n        },\r\n        removePaymentPlan: function () {\r\n            return $http.delete('storefrontapi/cart/paymentPlan');\r\n        },\r\n        createOrder: function (bankCardInfo) {\r\n            return $http.post('storefrontapi/cart/createorder', bankCardInfo);\r\n        },\r\n        updateCartComment: function (cartComment) {\r\n            return $http.put('storefrontapi/cart/comment', { comment: cartComment });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('listService', ['$http', function ($http) {\r\n    return {\r\n        getWishlist: function (listName) {\r\n            return $http.get('storefrontapi/lists/' + listName + '?t=' + new Date().getTime());\r\n        },\r\n        contains: function (productId, listName) {\r\n            return $http.get('storefrontapi/lists/' + listName +'/items/'+ productId + '/contains?t=' + new Date().getTime());\r\n        },\r\n        getListsWithProduct: function (productId, listNames) {\r\n            return $http.post('storefrontapi/lists/getlistswithproduct', { productId: productId, listNames: listNames });\r\n        },\r\n        addLineItem: function (productId, listName) {\r\n            return $http.post('storefrontapi/lists/items', { productId: productId, listName: listName });\r\n        },\r\n        removeLineItem: function (lineItemId, listName) {\r\n            return $http.delete('storefrontapi/lists/' + listName + '/items/' + lineItemId);\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('quoteRequestService', ['$http', function ($http) {\r\n    return {\r\n        getCurrentQuoteRequest: function () {\r\n            return $http.get('storefrontapi/quoterequest/current?t=' + new Date().getTime());\r\n        },\r\n        getQuoteRequest: function (number) {\r\n            return $http.get('storefrontapi/quoterequests/' + number + '?t=' + new Date().getTime());\r\n        },\r\n        getQuoteRequestItemsCount: function (number) {\r\n            return $http.get('storefrontapi/quoterequests/' + number + '/itemscount?t=' + new Date().getTime());\r\n        },\r\n        addProductToQuoteRequest: function (productId, quantity) {\r\n            return $http.post('storefrontapi/quoterequests/current/items', { productId: productId, quantity: quantity });\r\n        },\r\n        removeProductFromQuoteRequest: function (quoteRequestNumber, quoteItemId) {\r\n            return $http.delete('storefrontapi/quoterequests/' + quoteRequestNumber + '/items/' + quoteItemId);\r\n        },\r\n        submitQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/submit', quoteRequest);\r\n        },\r\n        rejectQuoteRequest: function (quoteRequestNumber) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/reject');\r\n        },\r\n        updateQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.put('storefrontapi/quoterequests/' + quoteRequestNumber + '/update', quoteRequest);\r\n        },\r\n        getTotals: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/totals', quoteRequest);\r\n        },\r\n        confirmQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/confirm', quoteRequest);\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('recommendationService', ['$http', function ($http) {\r\n    return {\r\n        getRecommendedProducts: function (requestData) {\r\n            return $http.post('storefrontapi/recommendations', requestData );\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('orderService', ['$http', function ($http) {\r\n    return {\r\n        getOrder: function (orderNumber) {\r\n            return $http.get('storefrontapi/orders/' + orderNumber + '?t=' + new Date().getTime());\r\n        }\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\n\r\nstorefrontApp.controller('mainController', ['$scope', '$location', '$window', 'customerService', 'storefrontApp.mainContext',\r\n    function ($scope, $location, $window, customerService, mainContext) {\r\n\r\n        //Base store url populated in layout and can be used for construction url inside controller\r\n        $scope.baseUrl = {};\r\n\r\n        $scope.$watch(function () {\r\n            $scope.currentPath = $location.$$path.replace('/', '');\r\n        });\r\n\r\n        $scope.$on('storefrontError', function (event, data) {\r\n            $scope.storefrontNotification = data;\r\n            $scope.storefrontNotification.detailsVisible = false;\r\n        });\r\n\r\n        $scope.toggleNotificationDetails = function () {\r\n            $scope.storefrontNotification.detailsVisible = !$scope.storefrontNotification.detailsVisible;\r\n        }\r\n\r\n        $scope.closeNotification = function () {\r\n            $scope.storefrontNotification = null;\r\n        }\r\n\r\n        //For outside app redirect (To reload the page after changing the URL, use the lower-level API)\r\n        $scope.outerRedirect = function (absUrl) {\r\n            $window.location.href = absUrl;\r\n        };\r\n\r\n        //change in the current URL or change the current URL in the browser (for app route)\r\n        $scope.innerRedirect = function (path) {\r\n            $location.path(path);\r\n            $scope.currentPath = $location.$$path.replace('/', '');\r\n        };\r\n\r\n        $scope.stringifyAddress = function (address) {\r\n            var stringifiedAddress = address.firstName + ' ' + address.lastName + ', ';\r\n            stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n            stringifiedAddress += address.countryName + ', ';\r\n            stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n            stringifiedAddress += address.city + ' ';\r\n            stringifiedAddress += address.line1 + ', ';\r\n            stringifiedAddress += address.line2 ? address.line2 : '';\r\n            stringifiedAddress += address.postalCode;\r\n            return stringifiedAddress;\r\n        }\r\n\r\n        $scope.getObjectSize = function (obj) {\r\n            var size = 0, key;\r\n            for (key in obj) {\r\n                if (obj.hasOwnProperty(key)) {\r\n                    size++;\r\n                }\r\n            }\r\n            return size;\r\n        }\r\n\r\n        mainContext.getCustomer = $scope.getCustomer = function () {\r\n            customerService.getCurrentCustomer().then(function (response) {\r\n                var addressId = 1;\r\n                _.each(response.data.addresses, function (address) {\r\n                    address.id = addressId;\r\n                    addressId++;\r\n                });\r\n                response.data.isContact = response.data.memberType === 'Contact';\r\n                mainContext.customer = $scope.customer = response.data;\r\n            });\r\n        };\r\n\r\n        $scope.getCustomer();\r\n    }])\r\n\r\n    .factory('storefrontApp.mainContext', function () {\r\n        return {};\r\n    });\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('cartController', ['$rootScope', '$scope', '$timeout', 'cartService', 'catalogService', function ($rootScope, $scope, $timeout, cartService, catalogService) {\r\n    var timer;\r\n\r\n    initialize();\r\n\r\n    $scope.setCartForm = function (form) {\r\n        $scope.formCart = form;\r\n    }\r\n\r\n    $scope.changeLineItemQuantity = function (lineItemId, quantity) {\r\n        var lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n        if (!lineItem || quantity < 1 || $scope.cartIsUpdating || $scope.formCart.$invalid) {\r\n            return;\r\n        }\r\n        var initialQuantity = lineItem.quantity;\r\n        lineItem.quantity = quantity;\r\n        $timeout.cancel(timer);\r\n        timer = $timeout(function () {\r\n            $scope.cartIsUpdating = true;\r\n            cartService.changeLineItemQuantity(lineItemId, quantity).then(function (response) {\r\n                getCart();\r\n                $rootScope.$broadcast('cartItemsChanged');\r\n            }, function (response) {\r\n                lineItem.quantity = initialQuantity;\r\n                $scope.cartIsUpdating = false;\r\n            });\r\n        }, 300);\r\n    }\r\n\r\n    $scope.changeLineItemPrice = function (lineItemId, newPrice) {\r\n    \tvar lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n    \tif (!lineItem || $scope.cartIsUpdating) {\r\n    \t\treturn;\r\n    \t}\r\n    \t$scope.cartIsUpdating = true;\r\n        cartService.changeLineItemPrice(lineItemId, newPrice).then(function (response) {\r\n    \t\tgetCart();\r\n    \t\t$rootScope.$broadcast('cartItemsChanged');\r\n    \t}, function (response) {\r\n    \t\t$scope.cart.items = initialItems;\r\n    \t\t$scope.cartIsUpdating = false;\r\n    \t});\r\n    };\r\n    $scope.removeLineItem = function (lineItemId) {\r\n        var lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n        if (!lineItem || $scope.cartIsUpdating) {\r\n            return;\r\n        }\r\n        $scope.cartIsUpdating = true;\r\n        var initialItems = angular.copy($scope.cart.items);\r\n        $scope.recentCartItemModalVisible = false;\r\n        $scope.cart.items = _.without($scope.cart.items, lineItem);\r\n        cartService.removeLineItem(lineItemId).then(function (response) {\r\n            getCart();\r\n            $rootScope.$broadcast('cartItemsChanged');\r\n        }, function (response) {\r\n            $scope.cart.items = initialItems;\r\n            $scope.cartIsUpdating = false;\r\n        });\r\n    }   \r\n\r\n    $scope.submitCart = function () {\r\n        $scope.formCart.$setSubmitted();\r\n        if ($scope.formCart.$invalid) {\r\n            return;\r\n        }\r\n        cartService.updateCartComment($scope.cart.comment).then(function (resp) {\r\n            $scope.outerRedirect($scope.baseUrl + 'cart/checkout');\r\n        });\r\n    }\r\n\r\n    $scope.searchProduct = function () {\r\n        $scope.productSearchResult = null;\r\n        if ($scope.productSkuOrName) {\r\n            $timeout.cancel(timer);\r\n            timer = $timeout(function () {\r\n                $scope.productSearchProcessing = true;\r\n                var criteria = {\r\n                    keyword: $scope.productSkuOrName,\r\n                    start: 0,\r\n                    pageSize: 5\r\n                }\r\n                catalogService.search(criteria).then(function (response) {\r\n                    $scope.productSearchProcessing = false;\r\n                    $scope.productSearchResult = response.data.products;\r\n                }, function (response) {\r\n                    $scope.productSearchProcessing = false;\r\n                });\r\n            }, 300);\r\n        }\r\n    }\r\n\r\n    $scope.selectSearchedProduct = function (product) {\r\n        $scope.productSearchResult = null;\r\n        $scope.selectedSearchedProduct = product;\r\n        $scope.productSkuOrName = product.name;\r\n    }\r\n\r\n    $scope.addProductToCart = function (product, quantity) {\r\n        $scope.cartIsUpdating = true;\r\n        cartService.addLineItem(product.id, quantity).then(function (response) {\r\n            getCart();\r\n            $scope.productSkuOrName = null;\r\n            $scope.selectedSearchedProduct = null;\r\n            $rootScope.$broadcast('cartItemsChanged');\r\n        });\r\n    }\r\n\r\n    function initialize() {\r\n        getCart();\r\n    }\r\n\r\n    function getCart() {\r\n        $scope.cartIsUpdating = true;\r\n        cartService.getCart().then(function (response) {\r\n            var cart = response.data;\r\n            cart.hasValidationErrors = _.some(cart.validationErrors) || _.some(cart.items, function (item) { return _.some(item.validationErrors) });\r\n            $scope.cart = cart;\r\n            $scope.cartIsUpdating = false;\r\n        }, function (response) {\r\n            $scope.cartIsUpdating = false;\r\n        });\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('cartBarController', ['$scope', 'cartService', function ($scope, cartService) {\r\n    getCartItemsCount();\r\n\r\n    $scope.$on('cartItemsChanged', function (event, data) {\r\n        getCartItemsCount();\r\n    });\r\n\r\n    function getCartItemsCount() {\r\n        cartService.getCartItemsCount().then(function (response) {\r\n            $scope.cartItemsCount = response.data;\r\n        });\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('recentlyAddedCartItemDialogController', ['$scope', '$window', '$uibModalInstance', 'dialogData', function ($scope, $window, $uibModalInstance, dialogData) {\r\n    $scope.$on('cartItemsChanged', function (event, data) {\r\n        dialogData.updated = true;\r\n    });\r\n\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    }\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('quoteRequestController', ['$rootScope', '$scope', '$window', '$location', 'quoteRequestService', 'cartService',\r\n    function ($rootScope, $scope, $window, $location, quoteRequestService, cartService) {\r\n    initialize();\r\n\r\n    $scope.setQuoteRequestForm = function (form) {\r\n        $scope.formQuoteRequest = form;\r\n    }\r\n\r\n    $scope.displayForStatuses = function (statuses) {\r\n        return _.contains(statuses, $scope.quoteRequest.status);\r\n    }\r\n\r\n    $scope.addTierPrice = function (quoteItem) {\r\n        quoteItem.proposalPrices.push({\r\n            id: quoteItem.proposalPrices.length + 1,\r\n            price: quoteItem.salePrice,\r\n            quantity: 1\r\n        });\r\n    }\r\n\r\n    $scope.changeTierPriceQuantity = function (tierPrice, quantity) {\r\n        if (quantity < 1 || quantity.isNaN) {\r\n            return;\r\n        }\r\n        tierPrice.quantity = quantity;\r\n    }\r\n\r\n    $scope.removeTierPrice = function (quoteItem, tierPrice) {\r\n        quoteItem.proposalPrices = _.without(quoteItem.proposalPrices, tierPrice);\r\n    }\r\n\r\n    $scope.removeProductFromQuoteRequest = function (quoteItem) {\r\n        var initialQuoteItems = angular.copy($scope.quoteRequest.items);\r\n        $scope.quoteRequest.items = _.without($scope.quoteRequest.items, quoteItem);\r\n        quoteRequestService.removeProductFromQuoteRequest($scope.quoteRequest.id, quoteItem.id).then(function (response) {\r\n            getQuoteRequest($scope.quoteRequest.id);\r\n            $rootScope.$broadcast('actualQuoteRequestItemsChanged');\r\n        }, function (response) {\r\n            $scope.quoteRequest.items = initialQuoteItems;\r\n        });\r\n    }\r\n\r\n    $scope.setCountry = function (addressType, countryName) {\r\n        var country = _.find($scope.countries, function (c) { return c.name == countryName });\r\n        if (!country) {\r\n            return;\r\n        }\r\n        if (addressType == 'Billing') {\r\n            $scope.billingCountry = country;\r\n            $scope.billingCountryRegions = [];\r\n            $scope.quoteRequest.billingAddress.countryCode = country.code3 || country.code2;\r\n            $scope.quoteRequest.billingAddress.regionId = null;\r\n            $scope.quoteRequest.billingAddress.regionName = null;\r\n        }\r\n        if (addressType == 'Shipping') {\r\n            $scope.shippingCountry = country;\r\n            $scope.shippingCountryRegions = [];\r\n            $scope.quoteRequest.shippingAddress.countryCode = country.code3 || country.code2;\r\n            $scope.quoteRequest.shippingAddress.regionId = null;\r\n            $scope.quoteRequest.shippingAddress.regionName = null;\r\n        }\r\n        if (country.code3) {\r\n            getCountryRegions(addressType, country.code3);\r\n        }\r\n    }\r\n\r\n    $scope.setCountryRegion = function (addressType) {\r\n        if (addressType == 'Billing') {\r\n            var countryRegion = _.find($scope.billingCountryRegions, function (r) { return r.name == $scope.quoteRequest.billingAddress.regionName });\r\n            if (!countryRegion) {\r\n                return;\r\n            }\r\n            $scope.quoteRequest.billingAddress.regionId = countryRegion.code;\r\n        }\r\n        if (addressType == 'Shipping') {\r\n            var countryRegion = _.find($scope.shippingCountryRegions, function (r) { return r.name == $scope.quoteRequest.shippingAddress.regionName });\r\n            if (!countryRegion) {\r\n                return;\r\n            }\r\n            $scope.quoteRequest.shippingAddress.regionId = countryRegion.code;\r\n        }\r\n    }\r\n\r\n    $scope.selectCustomerAddress = function (addressType) {\r\n        if (addressType === 'Billing') {\r\n            var billingAddress = _.find($scope.customer.addresses, function (a) { return a.id === $scope.quoteRequest.billingAddress.id });\r\n            if (billingAddress) {\r\n                billingAddress.type = 'Billing';\r\n                if (billingAddress.countryCode) {\r\n                    getCountryRegions('Billing', billingAddress.countryCode);\r\n                }\r\n                $scope.quoteRequest.billingAddress = angular.copy(billingAddress);\r\n            }\r\n        }\r\n        if (addressType === 'Shipping') {\r\n            var shippingAddress = _.find($scope.customer.addresses, function (a) { return a.id === $scope.quoteRequest.shippingAddress.id });\r\n            if (shippingAddress) {\r\n                shippingAddress.type = 'Shipping';\r\n                if (shippingAddress.countryCode) {\r\n                    getCountryRegions('Shipping', shippingAddress.countryCode);\r\n                }\r\n                $scope.quoteRequest.shippingAddress = angular.copy(shippingAddress);\r\n            }\r\n        }\r\n    }\r\n\r\n    $scope.stringifyAddress = function (address) {\r\n        if (!address) {\r\n            return;\r\n        }\r\n        var stringifiedAddress = address.firstName + ' ' + address.lastName + ', ';\r\n        stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n        stringifiedAddress += address.countryName + ', ';\r\n        stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n        stringifiedAddress += address.city + ' ';\r\n        stringifiedAddress += address.line1 + ', ';\r\n        stringifiedAddress += address.line2 ? address.line2 : '';\r\n        stringifiedAddress += address.postalCode;\r\n        return stringifiedAddress;\r\n    }\r\n\r\n    $scope.submitQuoteRequest = function () {\r\n        $scope.formQuoteRequest.$setSubmitted();\r\n        if ($scope.formQuoteRequest.$invalid) {\r\n            return;\r\n        }\r\n        $scope.quoteRequest.billingAddress.email = $scope.quoteRequest.email;\r\n        if ($scope.quoteRequest.shippingAddress) {\r\n            $scope.quoteRequest.shippingAddress.email = $scope.quoteRequest.email;\r\n        }\r\n        quoteRequestService.submitQuoteRequest($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            if ($scope.customer.isRegisteredUser) {\r\n                $scope.outerRedirect($scope.baseUrl + 'account/quoterequests');\r\n            } else {\r\n                $scope.outerRedirect($scope.baseUrl + 'account/login');\r\n            }\r\n        });\r\n    }\r\n\r\n    $scope.rejectQuoteRequest = function () {\r\n        quoteRequestService.rejectQuoteRequest($scope.quoteRequest.id).then(function (response) {\r\n            quoteRequestService.getQuoteRequest($scope.quoteRequest.id).then(function (response) {\r\n                $scope.quoteRequest = response.data;\r\n            });\r\n        });\r\n    }\r\n\r\n    $scope.selectTierPrice = function () {\r\n        quoteRequestService.getTotals($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            $scope.quoteRequest.totals = response.data;\r\n        });\r\n    }\r\n\r\n    $scope.confirmQuoteRequest = function () {\r\n        quoteRequestService.confirmQuoteRequest($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            $scope.outerRedirect($scope.baseUrl + 'cart/checkout/#/shipping-address');\r\n        });\r\n    }\r\n\r\n    $scope.setRequestShippingQuote = function () {\r\n        if (!$scope.quoteRequest.requestShippingQuote) {\r\n            $scope.quoteRequest.shippingAddress = null;\r\n        }\r\n    }\r\n\r\n    $scope.setShippingAddressEqualsBilling = function () {\r\n        if ($scope.quoteRequest.shippingAddressEqualsBilling) {\r\n            $scope.quoteRequest.shippingAddress = angular.copy($scope.quoteRequest.billingAddress);\r\n            $scope.quoteRequest.shippingAddress.type = 'Shipping';\r\n            if ($scope.quoteRequest.shippingAddress.countryCode) {\r\n                $scope.shippingCountry = $scope.billingCountry;\r\n                getCountryRegions('Shipping', $scope.quoteRequest.shippingAddress.countryCode);\r\n            }\r\n        }\r\n    }\r\n\r\n    $scope.tierPricesUnique = function (quoteItem) {\r\n        var quantities = _.map(quoteItem.proposalPrices, function (p) { return p.quantity });\r\n        return _.uniq(quantities).length == quoteItem.proposalPrices.length;\r\n    }\r\n\r\n    function initialize() {\r\n        var quoteRequestNumber = $location.url().replace('/', '') || $window.currentQuoteRequestNumber;\r\n        $scope.billingCountry = null;\r\n        $scope.shippingCountry = null;\r\n        getCountries();\r\n        if (quoteRequestNumber) {\r\n            getQuoteRequest(quoteRequestNumber);\r\n        } else {\r\n            $scope.quoteRequest = { itemsCount: 0 };\r\n        }\r\n    }\r\n\r\n    function getQuoteRequest(number) {\r\n        quoteRequestService.getQuoteRequest(number).then(function (response) {\r\n            var quoteRequest = response.data;\r\n            if (!quoteRequest.billingAddress) {\r\n                if ($scope.customer.addresses && $scope.customer.addresses.length) {\r\n                    quoteRequest.billingAddress = angular.copy($scope.customer.addresses[0]);\r\n                    quoteRequest.billingAddress.type = 'Billing';\r\n                    if (quoteRequest.billingAddress.countryCode) {\r\n                        getCountryRegions('Billing', quoteRequest.billingAddress.countryCode);\r\n                    }\r\n                } else {\r\n                    quoteRequest.billingAddress = {\r\n                        firstName: $scope.customer.firstName,\r\n                        lastName: $scope.customer.lastName\r\n                    };\r\n                }\r\n            }\r\n            _.each(quoteRequest.items, function (quoteItem) {\r\n                var i = 1;\r\n                _.each(quoteItem.proposalPrices, function (tierPrice) {\r\n                    tierPrice.id = i;\r\n                    if (quoteItem.selectedTierPrice.quantity == tierPrice.quantity) {\r\n                        quoteItem.selectedTierPrice = tierPrice;\r\n                    }\r\n                    i++;\r\n                });\r\n            });\r\n            quoteRequest.requestShippingQuote = true;\r\n            $scope.quoteRequest = quoteRequest;\r\n        });\r\n    }\r\n\r\n    function getCountries() {\r\n        cartService.getCountries().then(function (response) {\r\n            $scope.countries = response.data;\r\n        });\r\n    }\r\n\r\n    function getCountryRegions(addressType, countryCode) {\r\n        cartService.getCountryRegions(countryCode).then(function (response) {\r\n            var countryRegions = response.data;\r\n            if (addressType == 'Billing') {\r\n                $scope.billingCountryRegions = countryRegions || [];\r\n            }\r\n            if (addressType == 'Shipping') {\r\n                $scope.shippingCountryRegions = countryRegions || [];\r\n            }\r\n        });\r\n    }\r\n\r\n    function toFormModel(quoteRequest) {\r\n        var quoteRequestFormModel = {\r\n            id: quoteRequest.id,\r\n            tag: quoteRequest.tag,\r\n            status: quoteRequest.status,\r\n            comment: quoteRequest.comment,\r\n            billingAddress: quoteRequest.billingAddress,\r\n            shippingAddress: quoteRequest.shippingAddress,\r\n            items: []\r\n        };\r\n        _.each(quoteRequest.items, function (quoteItem) {\r\n            var quoteItemFormModel = {\r\n                id: quoteItem.id,\r\n                comment: quoteItem.comment,\r\n                selectedTierPrice: {\r\n                    price: quoteItem.selectedTierPrice.price.amount,\r\n                    quantity: quoteItem.selectedTierPrice.quantity\r\n                },\r\n                proposalPrices: []\r\n            };\r\n            _.each(quoteItem.proposalPrices, function (tierPrice) {\r\n                quoteItemFormModel.proposalPrices.push({\r\n                    price: tierPrice.price.amount,\r\n                    quantity: tierPrice.quantity\r\n                });\r\n            });\r\n            quoteRequestFormModel.items.push(quoteItemFormModel);\r\n        });\r\n\r\n        return quoteRequestFormModel;\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('actualQuoteRequestBarController', ['$scope', 'quoteRequestService', function ($scope, quoteRequestService) {\r\n    getCurrentQuoteRequest();\r\n\r\n    $scope.$on('actualQuoteRequestItemsChanged', function (event, data) {\r\n        getCurrentQuoteRequest();\r\n    });\r\n\r\n    function getCurrentQuoteRequest() {\r\n        quoteRequestService.getCurrentQuoteRequest().then(function (response) {\r\n            $scope.actualQuoteRequest = response.data;\r\n        });\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('recentlyAddedActualQuoteRequestItemDialogController', ['$scope', '$window', '$uibModalInstance', 'dialogData',\r\n    function ($scope, $window, $uibModalInstance, dialogData) {\r\n\r\n    $scope.$on('actualQuoteRequestItemsChanged', function (event, data) {\r\n        dialogData.updated = true;\r\n    });\r\n\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    }\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n}]);\r\n","angular.module('storefrontApp')\r\n    .component('addToCompareButton', {\r\n        templateUrl: 'themes/assets/js/products-compare/add-to-compare-button.tpl.html',\r\n        bindings: {\r\n            productId: '<',\r\n            buttonType: '<',\r\n            customClass: '<',\r\n            buttonWidth: '<'\r\n        },\r\n        controller: ['$rootScope', 'catalogService', 'dialogService', 'compareProductService', function($rootScope, catalogService, dialogService, compareProductService) {\r\n            var $ctrl = this;\r\n\r\n            $ctrl.showButtonName = true;\r\n            if ($ctrl.buttonType == 'small') {\r\n                $ctrl.showButtonName = false;\r\n            }\r\n\r\n            $ctrl.$onInit = function () {\r\n                $ctrl.containProduct = compareProductService.isInProductCompareList($ctrl.productId);\r\n            }\r\n\r\n            $ctrl.addProductToCompareList = function (event) {\r\n                event.preventDefault();\r\n                catalogService.getProduct($ctrl.productId).then(function(response) {\r\n                    var product = response.data[0];\r\n                    var productQuantity = compareProductService.getProductsCount();\r\n                    if (productQuantity == 4) {\r\n                        dialogService.showDialog({ capacityExceeded: true }, 'productCompareListDialogController', 'storefront.product-compare-list-dialog.tpl');\r\n                        return;\r\n                    }\r\n                    if (!$ctrl.containProduct && productQuantity < 4) {\r\n                        compareProductService.addProduct($ctrl.productId);\r\n                        dialogService.showDialog(product, 'productCompareListDialogController', 'storefront.product-compare-list-dialog.tpl');\r\n                        $rootScope.$broadcast('productCompareListChanged');\r\n                    }\r\n                    else {\r\n                        var existingProduct = product;\r\n                        dialogService.showDialog(existingProduct, 'productCompareListDialogController', 'storefront.product-compare-list-dialog.tpl');\r\n                        return;\r\n                    }\r\n                    $ctrl.containProduct = true;\r\n                })\r\n            };\r\n        }]\r\n    })\r\n","angular.module('storefrontApp')\r\n    .component('productCompareListBar', {\r\n        templateUrl: \"product-compare-bar.tpl.html\",\r\n        controller: ['compareProductService', '$scope',\r\n            function(compareProductService, $scope) {\r\n                var $ctrl = this;\r\n                $ctrl.$onInit = function() {\r\n                    $ctrl.itemsCount = compareProductService.getProductsCount();\r\n                }\r\n                $scope.$on('productCompareListChanged', function(event, data) {\r\n                    $ctrl.itemsCount = compareProductService.getProductsCount();\r\n                });\r\n            }]\r\n    });\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.controller('productCompareListController', ['$rootScope', '$scope', 'catalogService', 'compareProductService',\r\n    function($rootScope, $scope, catalogService, compareProductService) {\r\n\r\n        $scope.properties = [];\r\n        $scope.products = [];\r\n\r\n        function initialize() {\r\n            $scope.loaded = false;\r\n            var productsIds = compareProductService.getProductsIds();\r\n            if (_.isEmpty(productsIds)) {\r\n                $scope.loaded = true;\r\n                return;\r\n            }\r\n            catalogService.getProducts(productsIds).then(function(response) {\r\n                if (_.indexOf(productsIds, '&') != -1) {\r\n                    $scope.products = response.data;\r\n                    _.each($scope.products, function(product) {\r\n                        modifyProperty(product);\r\n                    })\r\n                }\r\n                else {\r\n                    var product = response.data[0];\r\n                    modifyProperty(product);\r\n                    $scope.products.push(product);\r\n                }\r\n                $scope.getProductProperties();\r\n                $scope.loaded = true;\r\n            })\r\n        };\r\n\r\n        $scope.getProductProperties = function () {\r\n            if (_.isEmpty($scope.products))\r\n                return [];\r\n            var grouped = {};\r\n            var properties = _.flatten(_.map($scope.products, function(product) { return product.properties; }));\r\n            var propertyDisplayNames = _.uniq(_.map(properties, function(property) { return property.displayName; }));\r\n            _.each(propertyDisplayNames, function(displayName) {\r\n                grouped[displayName] = [];\r\n                var props = _.where(properties, { displayName: displayName });\r\n                _.each($scope.products, function(product) {\r\n                    var productProperty = _.find(props, function(prop) { return prop.productId === product.id });\r\n                    if (productProperty) {\r\n                        grouped[displayName].push(productProperty);\r\n                    } else {\r\n                        grouped[displayName].push({ valueType: 'ShortText', value: '-' });\r\n                    }\r\n                });\r\n            });\r\n            $scope.properties = grouped;\r\n        };\r\n\r\n        function modifyProperty(product) {\r\n            _.each(product.properties, function(property) {\r\n                property.productId = product.id;\r\n                if (property.valueType.toLowerCase() === 'number') {\r\n                    property.value = formatNumber(property.value);\r\n                }\r\n            })\r\n            return product;\r\n        }\r\n\r\n        $scope.hasValues = function(properties, onlyDifferences) {\r\n            var uniqueValues = _.uniq(_.map(properties, function (p) { return p.value }));\r\n            if (onlyDifferences && properties.length > 1 && uniqueValues.length == 1) {\r\n                return false;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        $scope.clearCompareList = function() {\r\n            compareProductService.clearComapreList();\r\n            $scope.products = [];\r\n            $rootScope.$broadcast('productCompareListChanged');\r\n            $scope.properties = [];\r\n        };\r\n\r\n        $scope.removeProduct = function (product) {\r\n            compareProductService.removeProduct(product.id)\r\n            $scope.products = _.without($scope.products, product);\r\n            $rootScope.$broadcast('productCompareListChanged');\r\n            $scope.getProductProperties();\r\n        };\r\n\r\n        function formatNumber(number) {\r\n            var float = parseFloat(number);\r\n            return !isNaN(float) ? float : number;\r\n        };\r\n        initialize();\r\n    }\r\n])\r\n\r\n.controller('productCompareListDialogController', ['$scope', '$window', 'dialogData', '$uibModalInstance',\r\n    function ($scope, $window, dialogData, $uibModalInstance) {\r\n        $scope.dialogData = dialogData;\r\n\r\n        $scope.close = function() {\r\n            $uibModalInstance.close();\r\n        };\r\n\r\n        $scope.redirect = function(url) {\r\n            $window.location = url;\r\n        };\r\n    }\r\n]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.controller('searchBarController', ['$scope', '$timeout', '$window', 'catalogService', function ($scope, $timeout, $window, catalogService) {\r\n    var timer;\r\n\r\n    $scope.query = $window.searchQuery;\r\n\r\n    $scope.getSuggestions = function () {\r\n        if (!$scope.query) {\r\n            return;\r\n        }\r\n        $timeout.cancel(timer);\r\n        timer = $timeout(function () {\r\n            $scope.searching = true;\r\n            $scope.categorySuggestions = [];\r\n            $scope.productSuggestions = [];\r\n            var searchCriteria = {\r\n                keyword: $scope.query,\r\n                start: 0,\r\n                pageSize: $window.suggestionsLimit\r\n            }\r\n            catalogService.searchCategories(searchCriteria).then(function (response) {\r\n                var categories = response.data.categories;\r\n                if (categories.length > 5) {\r\n                    searchCriteria.pageSize = $window.suggestionsLimit - 5;\r\n                    $scope.categorySuggestions = _.first(categories, 5);\r\n                } else {\r\n                    searchCriteria.pageSize = $window.suggestionsLimit - categories.length;\r\n                    $scope.categorySuggestions = categories;\r\n                }\r\n                catalogService.search(searchCriteria).then(function (response) {\r\n                    var products = response.data.products;\r\n                    $scope.productSuggestions = products;\r\n                    $scope.searching = false;\r\n                });\r\n            });\r\n        }, 300);\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcAddress', {\r\n    templateUrl: \"themes/assets/js/common-components/address.tpl.html\",\r\n    bindings: {\r\n        address: '=',\r\n        addresses: '<',\r\n        countries: '=',\r\n        validationContainer: '=',\r\n        getCountryRegions: '&',\r\n        editMode: '<',\r\n        onUpdate: '&'\r\n    },\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var ctrl = this;\r\n        this.$onInit = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        function populateRegionalDataForAddress(address) {\r\n            if (address) {\r\n                //Set country object for address\r\n                address.country = _.findWhere(ctrl.countries, { code3: address.countryCode });\r\n                if (address.country != null) {\r\n                    ctrl.address.countryName = ctrl.address.country.name;\r\n                    ctrl.address.countryCode = ctrl.address.country.code3;\r\n                }\r\n\r\n                if (address.country) {\r\n                    if (address.country.regions) {\r\n                        setAddressRegion(address, address.country.regions);\r\n                    }\r\n                    else {\r\n                        ctrl.getCountryRegions({ country: address.country }).then(function (regions) {\r\n                            address.country.regions = regions;\r\n                            setAddressRegion(address, regions);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function setAddressRegion(address, regions) {\r\n            address.region = _.findWhere(regions, { code: address.regionId });\r\n            if (address.region) {\r\n                ctrl.address.regionId = ctrl.address.region.code;\r\n                ctrl.address.regionName = ctrl.address.region.name;\r\n            }\r\n            else {\r\n                ctrl.address.regionId = undefined;\r\n                ctrl.address.regionName = undefined;\r\n            }\r\n        }\r\n\r\n        ctrl.setForm = function (frm) { ctrl.form = frm; };\r\n\r\n        ctrl.validate = function () {\r\n            if (ctrl.form) {\r\n                ctrl.form.$setSubmitted();\r\n                return ctrl.form.$valid;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        function stringifyAddress(address) {\r\n            var stringifiedAddress = address.firstName + ' ' + address.lastName + ', ';\r\n            stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n            stringifiedAddress += address.countryName + ', ';\r\n            stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n            stringifiedAddress += address.city + ' ';\r\n            stringifiedAddress += address.line1 + ', ';\r\n            stringifiedAddress += address.line2 ? address.line2 : '';\r\n            stringifiedAddress += address.postalCode;\r\n            return stringifiedAddress;\r\n        }\r\n\r\n        $scope.$watch('$ctrl.address', function () {\r\n            if (ctrl.address) {\r\n                populateRegionalDataForAddress(ctrl.address);\r\n                ctrl.address.name = stringifyAddress(ctrl.address);\r\n            }\r\n            ctrl.onUpdate({ address: ctrl.address });\r\n        }, true);\r\n\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcCreditCard', {\r\n    templateUrl: \"themes/assets/js/common-components/creditCard.tpl.html\",\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    bindings: {\r\n        card: '=',\r\n        validationContainer: '='\r\n    },\r\n    controller: ['$scope', '$filter', function ($scope, $filter) {\r\n        var ctrl = this;\r\n\r\n        this.$onInit = function () {\r\n            if(ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        $scope.$watch('$ctrl.card.bankCardHolderName', function (val) {\r\n            if (ctrl.card) {\r\n                ctrl.card.bankCardHolderName = $filter('uppercase')(val);\r\n            }\r\n        }, true);\r\n\r\n        ctrl.validate = function () {\r\n            ctrl.form.$setSubmitted();\r\n            return !ctrl.form.$invalid;\r\n        }\r\n\r\n    }]\r\n});\r\n","angular.module('storefrontApp')\r\n\r\n.component('vcLabeledInput', {\r\n    templateUrl: \"themes/assets/js/common-components/labeled-input.tpl.html\",\r\n    bindings: {\r\n        value: '=',\r\n        form: '=',\r\n        name: '@',\r\n        placeholder: '@',\r\n        type: '@?',\r\n        required: '<',\r\n        requiredError: '@?',\r\n        autofocus: '<'\r\n    },\r\n    controller: [function () {\r\n        var $ctrl = this;\r\n        \r\n        $ctrl.validate = function () {\r\n            $ctrl.form.$setSubmitted();\r\n            return $ctrl.form.$valid;\r\n        };\r\n\r\n    }]\r\n});","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcLineItems', {\r\n    templateUrl: \"themes/assets/js/common-components/lineItems.tpl.liquid\",\r\n    bindings: {\r\n        items: '='\r\n    }\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcPaymentMethods', {\r\n    templateUrl: \"themes/assets/js/common-components/paymentMethods.tpl.html\",\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    bindings: {\r\n        getAvailPaymentMethods: '&',\r\n        onSelectMethod: '&',\r\n        paymentMethod: '=',\r\n        validationContainer: '='\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var ctrl = this;\r\n\r\n        this.$onInit = function () {\r\n            ctrl.getAvailPaymentMethods().then(function (methods) {\r\n                ctrl.availPaymentMethods = _.sortBy(methods, function (x) { return x.priority; });\r\n                if (ctrl.paymentMethod) {\r\n                    ctrl.paymentMethod = _.findWhere(ctrl.availPaymentMethods, { code: ctrl.paymentMethod.code });\r\n                }\r\n                if (!ctrl.paymentMethod && ctrl.availPaymentMethods.length > 0) {\r\n                    ctrl.selectMethod(ctrl.availPaymentMethods[0]);\r\n                }\r\n            })\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        ctrl.validate = function () {\r\n            return ctrl.paymentMethod;\r\n        }\r\n\r\n        ctrl.selectMethod = function (method) {\r\n            ctrl.paymentMethod = method;\r\n            ctrl.onSelectMethod({ paymentMethod: method });\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcTotals', {\r\n    templateUrl: \"themes/assets/js/common-components/totals.tpl.liquid\",\r\n\tbindings: {\r\n\t\torder: '<'\r\n\t}\r\n});\r\n","//Call this to register our module to main application\r\nvar moduleName = \"storefront.account\";\r\n\r\nif (storefrontAppDependencies !== undefined) {\r\n    storefrontAppDependencies.push(moduleName);\r\n}\r\nangular.module(moduleName, ['ngResource', 'ngComponentRouter', 'credit-cards', 'pascalprecht.translate', 'ngSanitize', 'storefrontApp'])\r\n\r\n.config(['$translateProvider', function ($translateProvider) {\r\n    $translateProvider.useSanitizeValueStrategy('sanitizeParameters');\r\n    $translateProvider.useUrlLoader(BASE_URL + 'themes/localization.json');\r\n    $translateProvider.preferredLanguage('en');\r\n}])\r\n\r\n.run(['$templateCache', function ($templateCache) {\r\n    // cache application level templates\r\n    $templateCache.put('pagerTemplate.html', '<uib-pagination boundary-links=\"true\" max-size=\"$ctrl.pageSettings.numPages\" items-per-page=\"$ctrl.pageSettings.itemsPerPageCount\" total-items=\"$ctrl.pageSettings.totalItems\" ng-model=\"$ctrl.pageSettings.currentPage\" ng-change=\"$ctrl.pageSettings.pageChanged()\" class=\"pagination-sm\" previous-text=\"&lsaquo;\" next-text=\"&rsaquo;\" first-text=\"&laquo;\" last-text=\"&raquo;\"></uib-pagination>');\r\n}])\r\n\r\n.value('$routerRootComponent', 'vcAccountManager')\r\n\r\n.component('vcAccountManager', {\r\n    templateUrl: \"account-manager.tpl\",\r\n    bindings: {\r\n        baseUrl: '<',\r\n        customer: '<'\r\n    },\r\n    $routeConfig: [\r\n         { path: '/orders/...', name: 'Orders', component: 'vcAccountOrders'},\r\n         { path: '/subscriptions/...', name: 'Subscriptions', component: 'vcAccountSubscriptions' },\r\n         { path: '/quotes', name: 'Quotes', component: 'vcAccountQuotes' },\r\n         { path: '/profile', name: 'Profile', component: 'vcAccountProfileUpdate', useAsDefault: true },\r\n         { path: '/addresses', name: 'Addresses', component: 'vcAccountAddresses' },\r\n         { path: '/changePassword', name: 'PasswordChange', component: 'vcAccountPasswordChange' },\r\n         { path: '/wishlist', name: 'WishList', component: 'vcAccountLists' }\r\n    ],\r\n    controller: ['storefront.accountApi', 'storefrontApp.mainContext', 'loadingIndicatorService', function (accountApi, mainContext, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $ctrl.getQuotes = function (pageNumber, pageSize, sortInfos, callback) {\r\n            loader.wrapLoading(function () {\r\n                return accountApi.getQuotes({ pageNumber: pageNumber, pageSize: pageSize, sortInfos: sortInfos }, callback).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.updateProfile = function (updateRequest) {\r\n            loader.wrapLoading(function () {\r\n                return accountApi.updateAccount(updateRequest, mainContext.getCustomer).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.updateAddresses = function (data) {\r\n            return loader.wrapLoading(function () {\r\n                return accountApi.updateAddresses(data, mainContext.getCustomer).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.availCountries = accountApi.getCountries();\r\n\r\n        $ctrl.getCountryRegions = function (country) {\r\n            return accountApi.getCountryRegions(country).$promise;\r\n        };\r\n\r\n        $ctrl.changePassword = function (changePasswordData) {\r\n            return loader.wrapLoading(function () {\r\n                return accountApi.changePassword(changePasswordData).$promise;\r\n            });\r\n        };\r\n    }]\r\n})\r\n\r\n.service('confirmService', ['$q', function ($q) {\r\n    this.confirm = function (message) {\r\n        return $q.when(window.confirm(message || 'Is it OK?'));\r\n    };\r\n}])\r\n\r\n.factory('loadingIndicatorService', function () {\r\n    var retVal = {\r\n        isLoading: false,\r\n        wrapLoading: function (func) {\r\n            retVal.isLoading = true;\r\n            return func().then(function (result) {\r\n                retVal.isLoading = false;\r\n                return result;\r\n            },\r\n            function () { retVal.isLoading = false; });\r\n        }\r\n    };\r\n\r\n    return retVal;\r\n});","angular.module('storefront.account')\r\n.component('vcAccountAddresses', {\r\n    templateUrl: \"themes/assets/js/account/account-addresses.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefrontApp.mainContext', 'confirmService', '$translate', '$scope', 'loadingIndicatorService', function (mainContext, confirmService, $translate, $scope, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $scope.$watch(\r\n          function () { return mainContext.customer.addresses; },\r\n          function () {\r\n              $ctrl.addresses = mainContext.customer.addresses;\r\n          }\r\n        );\r\n\r\n        $ctrl.addNewAddress = function () {\r\n            if (_.last(components).validate()) {\r\n                $ctrl.addresses.push($ctrl.newAddress);\r\n                $ctrl.newAddress = null;\r\n                $ctrl.accountManager.updateAddresses($ctrl.addresses);\r\n            }\r\n        };\r\n\r\n        $ctrl.submit = function () {\r\n            if (components[$ctrl.editIdx].validate()) {\r\n                angular.copy($ctrl.editItem, $ctrl.addresses[$ctrl.editIdx]);\r\n                $ctrl.accountManager.updateAddresses($ctrl.addresses).then($ctrl.cancel);\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            $ctrl.editIdx = -1;\r\n            $ctrl.editItem = null;\r\n        };\r\n\r\n        $ctrl.edit = function ($index) {\r\n            $ctrl.editIdx = $index;\r\n            $ctrl.editItem = angular.copy($ctrl.addresses[$ctrl.editIdx]);\r\n        };\r\n\r\n        $ctrl.delete = function ($index) {\r\n            var showDialog = function (text) {\r\n                confirmService.confirm(text).then(function (confirmed) {\r\n                    if (confirmed) {\r\n                        $ctrl.addresses.splice($index, 1);\r\n                        $ctrl.accountManager.updateAddresses($ctrl.addresses);\r\n                    }\r\n                });\r\n            };\r\n\r\n            $translate('customer.addresses.delete_confirm').then(showDialog, showDialog);\r\n        };\r\n\r\n        var components = [];\r\n        $ctrl.addComponent = function (component) {\r\n            components.push(component);\r\n        };\r\n        $ctrl.removeComponent = function (component) {\r\n            components = _.without(components, component);\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n    .component('vcAccountLists', {\r\n        templateUrl: \"themes/assets/js/account/account-lists.tpl.liquid\",\r\n        $routeConfig: [\r\n            { path: '/', name: 'WishList', component: 'vcAccountLists', useAsDefault: true }\r\n        ],\r\n        controller: ['listService', '$rootScope', 'cartService', '$translate', 'loadingIndicatorService', '$timeout', function (listService, $rootScope, cartService, $translate, loader, $timeout) {\r\n            var $ctrl = this;\r\n            $ctrl.loader = loader;\r\n            $ctrl.selectedList = {};\r\n\r\n            $ctrl.initialize = function (lists) {\r\n                if (lists && lists.length > 0) {\r\n                    $ctrl.lists = lists;\r\n                    $ctrl.selectList(lists[0]);\r\n                    angular.forEach($ctrl.lists, function (list) {\r\n                        var titleKey = 'wishlist.general.' + list.name + '_list_title';\r\n                        var descriptionKey = 'wishlist.general.' + list.name + '_list_description';\r\n                        $translate([titleKey, descriptionKey]).then(function (translations) {\r\n                            list.title = translations[titleKey];\r\n                            list.description = translations[descriptionKey];\r\n                        }, function (translationIds) {\r\n                            list.title = translationIds[titleKey];\r\n                            list.description = translationIds[descriptionKey];\r\n                        });\r\n                    });\r\n                }\r\n            };\r\n\r\n\r\n            $ctrl.selectList = function (list) {\r\n                $ctrl.selectedList = list;\r\n                loader.wrapLoading(function () {\r\n                    return listService.getWishlist(list.name).then(function (response) {\r\n                        $ctrl.selectedList.items = response.data.items;                     \r\n                    });\r\n                });\r\n            };\r\n\r\n            $ctrl.removeLineItem = function (lineItem, list) {  \r\n                loader.wrapLoading(function () {\r\n                    return listService.removeLineItem(lineItem.id, list.name).then(function (response) {\r\n                        $ctrl.selectList(list);\r\n                    });\r\n                });\r\n            };\r\n\r\n            $ctrl.addToCart = function (lineItem) {\r\n                loader.wrapLoading(function () {\r\n                    return cartService.addLineItem(lineItem.productId, 1).then(function (response) {\r\n                        $ctrl.productAdded = true;\r\n                        $timeout(function () {\r\n                            $ctrl.productAdded = false;\r\n                        }, 2000);\r\n                    });\r\n                });\r\n            }\r\n        }]\r\n    });\r\n","angular.module('storefront.account')\r\n.component('vcAccountOrders', {\r\n    templateUrl: \"themes/assets/js/account/account-orders.tpl.liquid\",\r\n    $routeConfig: [\r\n     { path: '/', name: 'OrderList', component: 'vcAccountOrdersList', useAsDefault: true },\r\n     { path: '/:number', name: 'OrderDetail', component: 'vcAccountOrderDetail' }\r\n    ],\r\n    controller: ['orderHelper', function (orderHelper) {\r\n        var $ctrl = this;\r\n        $ctrl.orderHelper = orderHelper;\r\n    }]\r\n})\r\n\r\n.component('vcAccountOrdersList', {\r\n    templateUrl: \"account-orders-list.tpl\",\r\n    controller: ['storefront.orderApi', 'loadingIndicatorService', function (orderApi, loader) {\r\n        var ctrl = this;\r\n        ctrl.loader = loader;\r\n        ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        ctrl.pageSettings.pageChanged = function () {\r\n            loader.wrapLoading(function () {\r\n                return orderApi.search({\r\n                    pageNumber: ctrl.pageSettings.currentPage,\r\n                    pageSize: ctrl.pageSettings.itemsPerPageCount,\r\n                    sortInfos: ctrl.sortInfos\r\n                }, function (data) {\r\n                    ctrl.entries = data.results;\r\n                    ctrl.pageSettings.totalItems = data.totalCount;\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            ctrl.pageSettings.currentPage = next.params.pageNumber || ctrl.pageSettings.currentPage;\r\n            ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n})\r\n\r\n.component('vcAccountOrderDetail', {\r\n    templateUrl: \"account-order-detail.tpl\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefront.orderApi', '$rootScope', '$window', 'loadingIndicatorService', 'confirmService', 'orderHelper', function (orderApi, $rootScope, $window, loader, confirmService, orderHelper) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.hasPhysicalProducts = true;\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                $ctrl.order = orderApi.get({ number: $ctrl.orderNumber }, function (result) {\r\n                    $ctrl.isShowPayment = false;\r\n                    var lastPayment = _.last(_.sortBy($ctrl.order.inPayments, 'createdDate'));\r\n                    $ctrl.billingAddress = (lastPayment && lastPayment.billingAddress) ||\r\n                            _.findWhere($ctrl.order.addresses, { type: 'billing' }) ||\r\n                            _.first($ctrl.order.addresses);\r\n                    $ctrl.amountToPay = orderHelper.getNewPayment($ctrl.order).sum.amount;\r\n\r\n                    if ($ctrl.amountToPay > 0) {\r\n                        $ctrl.billingAddressEqualsShipping = true;\r\n                        loadPromise = orderApi.getNewPaymentData({ number: $ctrl.orderNumber }, function (result) {\r\n                            //$ctrl.order = result.order;\r\n                            configurePayment(result.paymentMethods, result.payment);\r\n                        }).$promise;\r\n                    }\r\n                });\r\n                return $ctrl.order.$promise;\r\n            });\r\n        }\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageNumber = next.params.pageNumber || 1;\r\n            $ctrl.orderNumber = next.params.number;\r\n\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.getInvoicePdf = function () {\r\n            var url = $window.BASE_URL + 'storefrontapi/orders/' + $ctrl.orderNumber + '/invoice';\r\n            $window.open(url, '_blank');\r\n        }\r\n\r\n        $ctrl.showPayment = function () {\r\n            loadPromise.then(function (result) {\r\n                $ctrl.isShowPayment = true;\r\n            });\r\n        };\r\n\r\n        var loadPromise;\r\n        $ctrl.getAvailPaymentMethods = function () {\r\n            return loadPromise.then(function (result) {\r\n                var preselectedMaymentMethod;\r\n                if ($ctrl.payment.gatewayCode) {\r\n                    preselectedMaymentMethod = _.findWhere(result.paymentMethods, { code: $ctrl.payment.gatewayCode });\r\n                }\r\n\r\n                return preselectedMaymentMethod ? [preselectedMaymentMethod] : result.paymentMethods;\r\n            });\r\n        };\r\n\r\n        $ctrl.selectPaymentMethod = function (paymentMethod) {\r\n            angular.extend($ctrl.payment, paymentMethod);\r\n            $ctrl.payment.gatewayCode = paymentMethod.code;\r\n            // $ctrl.payment.sum = angular.copy($ctrl.order.total);\r\n            // $ctrl.payment.sum.amount += paymentMethod.totalWithTax.amount;\r\n\r\n            $ctrl.validate();\r\n        };\r\n\r\n        $ctrl.validate = function () {\r\n            $ctrl.isValid = $ctrl.payment &&\r\n                $ctrl.payment.gatewayCode &&\r\n                $ctrl.payment.sum && $ctrl.payment.sum.amount > 0 &&\r\n                _.every(components, function (x) {\r\n                    return typeof x.validate !== \"function\" || x.validate();\r\n                });\r\n\r\n            return $ctrl.isValid;\r\n        };\r\n\r\n        $ctrl.submit = function () {\r\n            if ($ctrl.validate()) {\r\n                loader.wrapLoading(function () {\r\n                    $ctrl.payment.bankCardInfo = $ctrl.paymentMethod.card;\r\n                    return orderApi.addOrUpdatePayment({ number: $ctrl.orderNumber }, $ctrl.payment, function (payment) {\r\n                        orderApi.processPayment({ number: $ctrl.orderNumber, paymentNumber: payment.number }, $ctrl.paymentMethod.card, function (result) {\r\n                            var orderProcessingResult = result.orderProcessingResult;\r\n                            var paymentMethod = result.paymentMethod;\r\n\r\n                            if (!orderProcessingResult.isSuccess) {\r\n                                $rootScope.$broadcast('storefrontError', {\r\n                                    type: 'error',\r\n                                    title: ['Error in new payment processing: ', orderProcessingResult.error, 'New Payment status: ' + orderProcessingResult.newPaymentStatus].join(' '),\r\n                                    message: orderProcessingResult.error,\r\n                                });\r\n                                return;\r\n                            }\r\n\r\n                            if (paymentMethod.paymentMethodType && paymentMethod.paymentMethodType.toLowerCase() === 'preparedform' && orderProcessingResult.htmlForm) {\r\n                                outerRedirect($ctrl.accountManager.baseUrl + 'cart/checkout/paymentform?orderNumber=' + $ctrl.orderNumber);\r\n                            } else if (paymentMethod.paymentMethodType && paymentMethod.paymentMethodType.toLowerCase() === 'redirection' && orderProcessingResult.redirectUrl) {\r\n                                outerRedirect(orderProcessingResult.redirectUrl);\r\n                            } else {\r\n                                if ($ctrl.accountManager.customer.isRegisteredUser) {\r\n                                    refresh();\r\n                                } else {\r\n                                    outerRedirect($ctrl.accountManager.baseUrl + 'cart/thanks/' + $ctrl.orderNumber);\r\n                                }\r\n                            }\r\n                        })\r\n                    }).$promise;\r\n                });\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            confirmService.confirm('Cancel this payment?').then(function (confirmed) {\r\n                if (confirmed) {\r\n                    loader.wrapLoading(function () {\r\n                        return orderApi.cancelPayment({ number: $ctrl.orderNumber, paymentNumber: $ctrl.payment.number }, null, refresh).$promise;\r\n                    });\r\n                }\r\n            });\r\n        };\r\n\r\n        var components = [];\r\n        $ctrl.addComponent = function (component) {\r\n            components.push(component);\r\n        };\r\n        $ctrl.removeComponent = function (component) {\r\n            components = _.without(components, component);\r\n        };\r\n\r\n        function configurePayment(paymentMethods, newPaymentTemplate) {\r\n            $ctrl.payment = orderHelper.getNewPayment($ctrl.order, paymentMethods, newPaymentTemplate);\r\n            $ctrl.payment.purpose = $ctrl.payment.purpose || 'Repeated payment';\r\n            $ctrl.amountToPay = $ctrl.payment.sum.amount;\r\n\r\n            $ctrl.canCancelPayment = $ctrl.payment.id !== newPaymentTemplate.id;\r\n            if ($ctrl.canCancelPayment) {\r\n                $ctrl.selectPaymentMethod(_.findWhere(paymentMethods, { code: $ctrl.payment.gatewayCode }));\r\n            }\r\n\r\n            if (!_.some($ctrl.order.shipments)) {\r\n                $ctrl.hasPhysicalProducts = false;\r\n                $ctrl.billingAddressEqualsShipping = false;\r\n            }\r\n        }\r\n\r\n        function outerRedirect(absUrl) {\r\n            $window.location.href = absUrl;\r\n        };\r\n    }]\r\n})\r\n\r\n.factory('orderHelper', function () {\r\n    var retVal = {\r\n        getNewPayment: function (order, paymentMethods, newPaymentTemplate) {\r\n            var retVal;\r\n            var paidPayments = _.filter(order.inPayments, function (x) {\r\n                return x.status === 'Paid';\r\n            });\r\n            var paidAmount = _.reduce(paidPayments, function (memo, num) { return memo + num.sum.amount; }, 0);\r\n            var amountToPay = order.total.amount - paidAmount;\r\n\r\n            var pendingPayments = _.filter(order.inPayments, function (x) {\r\n                return !x.isCancelled &&\r\n                        (x.status === 'New' || x.status === 'Pending') &&\r\n                        x.sum.amount > 0; // && x.sum.amount === amountToPay;\r\n            });\r\n            var pendingPayment = _.last(_.sortBy(pendingPayments, 'createdDate'));\r\n            if (pendingPayment && (!paymentMethods || _.findWhere(paymentMethods, { code: pendingPayment.gatewayCode }))) {\r\n                retVal = pendingPayment;\r\n            } else {\r\n                newPaymentTemplate = newPaymentTemplate || { sum: {} };\r\n                newPaymentTemplate.sum.amount = amountToPay;\r\n                retVal = newPaymentTemplate;\r\n            }\r\n\r\n            return retVal;\r\n        }\r\n    };\r\n\r\n    return retVal;\r\n})\r\n\r\n.filter('orderToSummarizedStatusLabel', ['orderHelper', function (orderHelper) {\r\n    return function (order) {\r\n        var retVal = order.status || 'New';\r\n\r\n        var found = _.findWhere(orderHelper.statusLabels, { status: retVal.toLowerCase() });\r\n        if (found) {\r\n            retVal = found.label;\r\n        }\r\n\r\n        return retVal;\r\n    };\r\n}])\r\n;\r\n","angular.module('storefront.account')\r\n.component('vcAccountPasswordChange', {\r\n    templateUrl: \"themes/assets/js/account/account-password-change.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['loadingIndicatorService', function (loader) {\r\n        var ctrl = this;\r\n        ctrl.loader = loader;\r\n        ctrl.passwordChangeData = {};\r\n\r\n        ctrl.submit = function () {\r\n            // validation\r\n            ctrl.errors = null;\r\n            ctrl.error = {};\r\n            var hasError = false;\r\n            var errorMsg;\r\n\r\n            errorMsg = ctrl.passwordChangeData.oldPassword === ctrl.passwordChangeData.newPassword;\r\n            ctrl.error.newPassword = errorMsg\r\n            hasError = hasError || errorMsg;\r\n\r\n            if (!hasError) {\r\n                errorMsg = ctrl.passwordChangeData.newPassword !== ctrl.passwordChangeData.newPassword2;\r\n                ctrl.error.newPassword2 = errorMsg;\r\n                hasError = hasError || errorMsg;\r\n            }\r\n\r\n            if (!hasError) {\r\n                ctrl.accountManager.changePassword(ctrl.passwordChangeData).then(function (result) {\r\n                    angular.extend(ctrl, result);\r\n                    ctrl.passwordChangeData = {};\r\n                    ctrl.form.$setPristine();\r\n                });\r\n            }\r\n        };\r\n\r\n        ctrl.setForm = function (frm) { ctrl.form = frm; };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountProfileUpdate', {\r\n    templateUrl: \"themes/assets/js/account/account-profile-update.tpl.liquid\",\r\n    bindings: {\r\n        $router: '<'\r\n    },\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefrontApp.mainContext', '$scope', 'loadingIndicatorService', function (mainContext, $scope, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        \r\n        $scope.$watch(\r\n            function () { return mainContext.customer; },\r\n            function (customer) {\r\n                $ctrl.customer = customer;\r\n                if (customer) {\r\n                    if (customer.isContract) {\r\n                        $ctrl.$router.navigate(['Orders']);\r\n                    }\r\n                    $ctrl.changeData =\r\n                    {\r\n                        firstName: customer.firstName,\r\n                        lastName: customer.lastName,\r\n                        email: customer.email\r\n                    };\r\n                }\r\n            });\r\n\r\n        $ctrl.submit = function () {\r\n            // no validation\r\n            $ctrl.accountManager.updateProfile($ctrl.changeData);\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountQuotes', {\r\n    templateUrl: \"themes/assets/js/account/account-quotes.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: [function () {\r\n        var ctrl = this;\r\n        ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        ctrl.pageSettings.pageChanged = function () {\r\n            ctrl.accountManager.getQuotes(ctrl.pageSettings.currentPage, ctrl.pageSettings.itemsPerPageCount, ctrl.sortInfos, function (data) {\r\n                ctrl.entries = data.results;\r\n                ctrl.pageSettings.totalItems = data.totalCount;\r\n            });\r\n        };\r\n        \r\n        this.$routerOnActivate = function (next) {\r\n            ctrl.pageSettings.currentPage = next.params.pageNumber || ctrl.pageSettings.currentPage;\r\n            ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountSubscriptions', {\r\n    templateUrl: \"themes/assets/js/account/account-subscriptions.tpl.liquid\",\r\n    $routeConfig: [\r\n     { path: '/', name: 'SubscriptionList', component: 'vcAccountSubscriptionsList', useAsDefault: true },\r\n     { path: '/:number', name: 'SubscriptionDetail', component: 'vcAccountSubscriptionDetail' }\r\n    ]\r\n})\r\n\r\n.component('vcAccountSubscriptionsList', {\r\n    templateUrl: \"account-subscriptions-list.tpl\",\r\n    controller: ['storefront.subscriptionApi', 'confirmService', 'loadingIndicatorService', '$translate', function (subscriptionApi, confirmService, loader, $translate) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        $ctrl.pageSettings.pageChanged = function () {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.search({\r\n                    pageNumber: $ctrl.pageSettings.currentPage,\r\n                    pageSize: $ctrl.pageSettings.itemsPerPageCount,\r\n                    sortInfos: $ctrl.sortInfos\r\n                }, function (data) {\r\n                    $ctrl.entries = data.results;\r\n                    $ctrl.pageSettings.totalItems = data.totalCount;\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageSettings.currentPage = next.params.pageNumber || $ctrl.pageSettings.currentPage;\r\n            $ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n})\r\n\r\n.component('vcAccountSubscriptionDetail', {\r\n    templateUrl: \"account-subscription-detail.tpl\",\r\n    controller: ['storefront.subscriptionApi', 'confirmService', 'loadingIndicatorService', '$translate', function (subscriptionApi, confirmService, loader, $translate) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.get({ number: $ctrl.entryNumber }, function (result) {\r\n                    $ctrl.subscription = angular.copy(result);\r\n                }).$promise;\r\n            });\r\n        }\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageNumber = next.params.pageNumber || 1;\r\n            $ctrl.entryNumber = next.params.number;\r\n\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            //var showDialog = function (text) {\r\n            //    confirmService.confirm(text).then(function (confirmed) {\r\n            //        if (confirmed) {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.cancel({ number: $ctrl.entryNumber }, { number: $ctrl.entryNumber, cancelReason: $ctrl.cancelReason }, function (result) {\r\n                    $ctrl.subscription = angular.copy(result);\r\n                    $ctrl.isCancelFormVisible = false;\r\n                }).$promise;\r\n            });\r\n            //        }\r\n            //    });\r\n            //};\r\n            //$translate('customer.subscription.cancel_confirmation').then(showDialog, showDialog);\r\n        };\r\n    }]\r\n})\r\n\r\n.filter('toIntervalKey', function () {\r\n    return function (data, data_intervalCount) {\r\n        var retVal = 'customer.subscriptions.intervals.' + data.interval.toLowerCase() + '_' + (data_intervalCount === 1 ? 1 : 'plural');\r\n        //var everyKey = 'customer.subscriptions.intervals.every';\r\n\r\n        //$translate([intervalKey, everyKey]).then(function (translations) {\r\n        //var intervalVal = translations[intervalKey];\r\n        //  var everyVal = translations[everyKey];\r\n\r\n        //if (data_intervalCount === 1) {\r\n        //    retVal = intervalKey;\r\n        //} else {\r\n        //    retVal = data_intervalCount + intervalVal;\r\n        //}\r\n        //});\r\n\r\n        return retVal;\r\n    };\r\n})\r\n;","angular.module('storefront.account')\r\n    .factory('storefront.accountApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/account', null, {\r\n            updateAccount: { url: 'storefrontapi/account', method: 'POST' },\r\n            changePassword: { url: 'storefrontapi/account/password', method: 'POST' },\r\n            getQuotes: { url: 'storefrontapi/account/quotes' },\r\n            updateAddresses: { url: 'storefrontapi/account/addresses', method: 'POST' },\r\n            getCountries: { url: 'storefrontapi/countries', isArray: true },\r\n            getCountryRegions: { url: 'storefrontapi/countries/:code3/regions', isArray: true }\r\n        });\r\n    }])\r\n    .factory('storefront.orderApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/orders/:number', null, {\r\n            search: { url: 'storefrontapi/orders/search', method: 'POST' },\r\n            getNewPaymentData: { url: 'storefrontapi/orders/:number/newpaymentdata' },\r\n            addOrUpdatePayment: { url: 'storefrontapi/orders/:number/payments', method: 'POST' },\r\n            processPayment: { url: 'storefrontapi/orders/:number/payments/:paymentNumber/process', method: 'POST' },\r\n            cancelPayment: { url: 'storefrontapi/orders/:number/payments/:paymentNumber/cancel', method: 'POST' }\r\n        });\r\n    }])\r\n    .factory('storefront.subscriptionApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/subscriptions/:number', null, {\r\n            search: { url: 'storefrontapi/subscriptions/search', method: 'POST' },\r\n            cancel: { url: 'storefrontapi/subscriptions/:number/cancel', method: 'POST' }\r\n        });\r\n    }]);"]}